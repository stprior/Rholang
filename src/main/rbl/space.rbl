;; -*- mode: Lisp;-*- 
;; Filename:    space.rbl 
;; Authors:     luciusmeredith                                                    
;; Creation:    Thu Feb 23 18:57:26 2017 
;; Copyright:   See site license
;; Description: Basic Linda pattern
;; ------------------------------------------------------------------------

(defOprn consume)
(defOprn produce)
(defOprn match?)
(defOprn miss?)
(defOprn production?)

;;;;RblTable defined in rbl/rosette/table-oprns.rbl
(defActor NameSpace (slots& chart (new RblTable)))

 ;;; by makng this a reflective method - RMethod - we gain access to the awaiting continuation
 ;;; bound to the formal parameter ctxt
;;;; RMethod and defRMethod appear to be undocumented in Rosette 1.1 pdf
;;;; source defines it 
;;;; (defRMethod <proto> (<oprn> & <args>) & <body>)
;;;; ==>
;;;; `(add ,<oprn> (run (compile ',(rmethod ,<args> ,& <body>)
;;;;                             (ct-proto ,<proto>)))
;;;;               (sbo ,<proto>))
(defRMethod NameSpace (consume ctxt & location)

 ;;; the channel and the pattern of incoming messages to look for are destructured and bound
;;;; letrec simultaneously defines a list of identities which are bound from expressions
;;;; [channel ptrn] in the body of the namespace will be substituted by the result of evaluating location
 (letrec [[[channel ptrn] location]

         ;;; the incoming messages associated with the channel are collected in a subtable
         ;;; in this sense we can see that the semantic framework supports a compositional
         ;;; topic/subtopic/subsubtopic/â€¦ structuring technique that unifies message passing
         ;;; with content delivery primitives
         ;;; the channel name becomes the topic, and the pattern structure becomes
         ;;; the subtopic tree
         ;;; this also unifies with the URL view of resource access
;;;; sets subspace from tbl-get of chart channel 
;;;; chart is a slot (an RblTable), channel is from the earlier identity 
        [subspace (tbl-get chart channel)]
 

;;;; sets candidates from names of subspace
;;;; names is an operation on RblTable
;;;; N.B. Even though this expression may run in parallel with the one above,
;;;; it is able to refer to the result above (i.e. subspace) because all variable
;;;; references in Rosette are based on message passing.
       [candidates (names subspace)]

;;;; sets [extractions remainder] from 
;;;; folding candidates with the proc given
       [[extractions remainder]

     ;;; note that this is generic in the match? and miss? predicates
     ;;; matching could be unification (as it is in SpecialK) or it could be
     ;;; a number of other special purpose protocols
     ;;; the price for this genericity is performance
     ;;; there is decent research showing that there are hashing disciplines
     ;;; that could provide a better than reasonable approximation of unification
          (fold candidates
;;;; ? e is current item, acc is accumulator, k is the fold-function             
            (proc [e acc k]
                (let [
                       [[hits misses] acc]
                       [binding (match? ptrn e)]
                     ]
                  (if (miss? binding)
;;;; if e doesn't match pattern recurse with e=hits, acc = e & misses 
                    (k [hits [e & misses]])
;;;; else recurse with e = [ e binding] & previous hits, acc = misses
                    (k [[[e binding] & hits] misses])
                   )
;;;; should return list of e with binding for each hit ? 
       )))]

       ;;; this divides the hits into those matches that are data and
       ;;; those matches that are continuations
       ;;; and the rest of the code sends data to the awaiting continuation
       ;;; and appends the continuation to those matches that are currently
       ;;; data starved
       ;;; this is a much more fine-grained view of excluded middle
       [[productions consummation]
            (fold extractions
              (proc [[e binding] acc k]
                (let [
                     [[productions consumers] acc]
                     [hit (tbl-get subspace e)]]

                     [[extractions remainder] 
                       ( ;;;; folding candidates with the proc givensubspace e)]]
                     (if (production? hit)
                         (k [[[[e binding] hit] & productions] consumers])
                         (k [productions [[e hit] & consumers]])
                     )
       )))]]

   ;;;;Body of first letrec
   (seq
     (map productions
       (proc [[[ptrn binding] product]]
            (delete subspace ptrn)))
     (map consummation
       (proc [[ptrn consumers]]
            (tbl-add subspace
              ptrn (reverse [ctxt & (reverse consumers)]))))
     (update!)
     (ctxt-rtn ctxt productions))))

;;; This code is perfectly dual to the consumer code and so all the comments
;;; there apply in the corresponging code sites
(defRMethod NameSpace (produce ctxt & production)
 (letrec [[[channel ptrn product] production]
        [subspace (tbl-get chart channel)]
       [candidates (names subspace)]
       [[extractions remainder]
          (fold candidates
            (proc [e acc k]
                (let [[[hits misses] acc]
                [binding (match? ptrn e)]]
            (if (miss? binding)
                (k [[e & hits] misses])
                (k [hits [e & misses]])))))]
       [[productions consummation]
            (fold extractions
              (proc [[e binding] acc k]
                (let [[[productions consumers] acc]
               [hit (tbl-get subspace e)]]
                  (if (production? hit)
               (k [[[e hit] & productions] consumers])
               (k [productions [[[e binding] hit] & consumers]])))))]]
   (seq
     (map productions
       (proc [[ptrn prod]] (tbl-add subspace ptrn product)))
     (map consummation
       (proc [[[ptrn binding] consumers]]
       (seq
            (delete subspace ptrn)
            (map consumers
              (proc [consumer]
                (send ctxt-rtn consumer [product binding])
                binding)))))
     (update!)
     (ctxt-rtn ctxt product))))
