
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jun 07 15:29:29 PDT 2017
//----------------------------------------------------

package coop.rchain.syntax.rholang;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jun 07 15:29:29 PDT 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\002\013\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\005" +
    "\000\002\004\004\000\002\004\004\000\002\004\003\000" +
    "\002\005\007\000\002\005\003\000\002\006\013\000\002" +
    "\006\013\000\002\006\011\000\002\006\006\000\002\006" +
    "\006\000\002\006\006\000\002\006\006\000\002\006\003" +
    "\000\002\007\005\000\002\007\003\000\002\010\003\000" +
    "\002\010\005\000\002\011\003\000\002\011\004\000\002" +
    "\012\005\000\002\012\007\000\002\013\003\000\002\013" +
    "\005\000\002\014\007\000\002\015\003\000\002\015\004" +
    "\000\002\016\010\000\002\017\003\000\002\017\004\000" +
    "\002\020\003\000\002\020\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\005\000\002\022" +
    "\004\000\002\022\003\000\002\023\005\000\002\023\005" +
    "\000\002\023\003\000\002\024\005\000\002\024\005\000" +
    "\002\024\003\000\002\025\003\000\002\026\003\000\002" +
    "\026\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\005\000\002\030\006\000\002\031\003" +
    "\000\002\032\003\000\002\032\003\000\002\033\002\000" +
    "\002\033\003\000\002\033\005\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\005\000\002\035" +
    "\004\000\002\035\004\000\002\035\003\000\002\036\007" +
    "\000\002\036\003\000\002\037\011\000\002\037\006\000" +
    "\002\037\006\000\002\037\006\000\002\037\003\000\002" +
    "\040\005\000\002\040\003\000\002\041\002\000\002\041" +
    "\003\000\002\041\005\000\002\042\003\000\002\042\004" +
    "\000\002\042\003\000\002\043\002\000\002\043\003\000" +
    "\002\043\005\000\002\044\005\000\002\045\003\000\002" +
    "\045\005\000\002\046\007\000\002\047\003\000\002\047" +
    "\004\000\002\050\006\000\002\050\005\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\051\003\000\002\051\005\000\002" +
    "\052\003\000\002\052\005\000\002\053\003\000\002\053" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\004\034\004\001\002\000\004\054\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\004\010\001\002\000\026\005\uffac\020\021\027" +
    "\015\031\016\035\014\046\024\050\020\052\022\053\023" +
    "\055\025\001\002\000\026\005\uffaf\010\uffaf\013\uffaf\016" +
    "\uffaf\017\uffaf\021\uffaf\022\uffaf\023\uffaf\030\uffaf\047\uffaf" +
    "\001\002\000\026\005\uffad\010\uffad\013\uffad\016\uffad\017" +
    "\uffad\021\uffad\022\uffad\023\uffad\030\uffad\047\uffad\001\002" +
    "\000\006\005\uffab\017\340\001\002\000\026\005\uffa0\010" +
    "\uffa0\013\uffa0\016\uffa0\017\uffa0\021\uffa0\022\uffa0\023\uffa0" +
    "\030\uffa0\047\uffa0\001\002\000\046\004\043\011\041\012" +
    "\040\020\021\027\015\030\uffb2\031\016\032\046\035\014" +
    "\036\045\041\042\042\031\046\024\050\020\052\022\053" +
    "\023\054\032\055\025\001\002\000\030\005\uffc6\010\uffc6" +
    "\013\uffc6\016\uffc6\017\uffc6\021\uffc6\022\uffc6\023\uffc6\030" +
    "\uffc6\040\uffc6\047\uffc6\001\002\000\004\005\130\001\002" +
    "\000\026\005\uff9d\010\uff9d\013\uff9d\016\uff9d\017\uff9d\021" +
    "\uff9d\022\uff9d\023\uff9d\030\uff9d\047\uff9d\001\002\000\032" +
    "\004\043\011\041\012\040\027\015\031\016\032\046\035" +
    "\014\046\024\050\020\052\022\053\023\055\025\001\002" +
    "\000\026\005\uff9f\010\uff9f\013\uff9f\016\uff9f\017\uff9f\021" +
    "\uff9f\022\uff9f\023\uff9f\030\uff9f\047\uff9f\001\002\000\026" +
    "\005\uff9e\010\uff9e\013\uff9e\016\uff9e\017\uff9e\021\uff9e\022" +
    "\uff9e\023\uff9e\030\uff9e\047\uff9e\001\002\000\026\005\uffa1" +
    "\010\uffa1\013\uffa1\016\uffa1\017\uffa1\021\uffa1\022\uffa1\023" +
    "\uffa1\030\uffa1\047\uffa1\001\002\000\030\005\uffc7\007\026" +
    "\010\uffc7\013\uffc7\016\uffc7\017\uffc7\021\uffc7\022\uffc7\023" +
    "\uffc7\030\uffc7\047\uffc7\001\002\000\046\004\043\010\uffb2" +
    "\011\041\012\040\020\021\027\015\031\016\032\046\035" +
    "\014\036\045\041\042\042\031\046\024\050\020\052\022" +
    "\053\023\054\032\055\025\001\002\000\004\010\124\001" +
    "\002\000\022\005\uffc2\010\uffc2\013\uffaf\016\uffc2\017\uffc2" +
    "\023\uffc2\030\uffc2\047\uffc2\001\002\000\010\031\016\040" +
    "\uffc5\055\116\001\002\000\004\004\112\001\002\000\004" +
    "\013\106\001\002\000\026\005\uffbc\010\uffbc\013\uffbc\016" +
    "\uffbc\017\uffbc\021\uffbc\022\uffbc\023\uffbc\030\uffbc\047\uffbc" +
    "\001\002\000\020\005\uffba\010\uffba\016\uffba\017\uffba\023" +
    "\uffba\030\uffba\047\uffba\001\002\000\020\005\uffb5\010\uffb5" +
    "\016\uffb5\017\uffb5\023\uffb5\030\uffb5\047\uffb5\001\002\000" +
    "\020\005\uffb3\010\uffb3\016\uffb3\017\uffb3\023\uffb3\030\uffb3" +
    "\047\uffb3\001\002\000\024\020\021\027\015\031\016\035" +
    "\014\046\024\050\020\052\022\053\023\055\025\001\002" +
    "\000\024\020\021\027\015\031\016\035\014\046\024\050" +
    "\020\052\022\053\023\055\025\001\002\000\044\004\043" +
    "\011\041\012\040\020\021\027\015\031\016\032\046\035" +
    "\014\036\045\041\042\042\031\046\024\050\020\052\022" +
    "\053\023\054\032\055\025\001\002\000\044\004\043\011" +
    "\041\012\040\020\021\027\015\031\016\032\046\035\014" +
    "\036\045\041\042\042\031\046\024\050\020\052\022\053" +
    "\023\054\032\055\025\001\002\000\022\005\uffc0\010\uffc0" +
    "\013\uffad\016\uffc0\017\uffc0\023\uffc0\030\uffc0\047\uffc0\001" +
    "\002\000\004\004\054\001\002\000\026\005\uffc1\010\uffc1" +
    "\013\uffc1\016\uffc1\017\uffc1\021\uffc1\022\uffc1\023\uffc1\030" +
    "\uffc1\047\uffc1\001\002\000\014\005\uffb1\010\uffb1\016\050" +
    "\017\051\030\uffb1\001\002\000\044\004\043\011\041\012" +
    "\040\020\021\027\015\031\016\032\046\035\014\036\045" +
    "\041\042\042\031\046\024\050\020\052\022\053\023\054" +
    "\032\055\025\001\002\000\052\004\043\005\uffb2\010\uffb2" +
    "\011\041\012\040\020\021\027\015\030\uffb2\031\016\032" +
    "\046\035\014\036\045\041\042\042\031\046\024\050\020" +
    "\052\022\053\023\054\032\055\025\001\002\000\010\005" +
    "\uffb0\010\uffb0\030\uffb0\001\002\000\020\005\uffb4\010\uffb4" +
    "\016\uffb4\017\uffb4\023\uffb4\030\uffb4\047\uffb4\001\002\000" +
    "\024\020\021\027\015\031\016\035\014\046\024\050\020" +
    "\052\022\053\023\055\025\001\002\000\004\021\066\001" +
    "\002\000\006\005\uffa8\022\064\001\002\000\004\005\060" +
    "\001\002\000\004\007\061\001\002\000\044\004\043\011" +
    "\041\012\040\020\021\027\015\031\016\032\046\035\014" +
    "\036\045\041\042\042\031\046\024\050\020\052\022\053" +
    "\023\054\032\055\025\001\002\000\006\010\063\016\050" +
    "\001\002\000\020\005\uffb9\010\uffb9\016\uffb9\017\uffb9\023" +
    "\uffb9\030\uffb9\047\uffb9\001\002\000\024\020\021\027\015" +
    "\031\016\035\014\046\024\050\020\052\022\053\023\055" +
    "\025\001\002\000\004\005\uffa7\001\002\000\024\020\021" +
    "\027\015\031\016\035\014\046\024\050\020\052\022\053" +
    "\023\055\025\001\002\000\006\005\uffa9\022\uffa9\001\002" +
    "\000\006\005\071\016\050\001\002\000\026\005\uffbf\010" +
    "\uffbf\013\uffbf\016\uffbf\017\uffbf\021\uffbf\022\uffbf\023\uffbf" +
    "\030\uffbf\047\uffbf\001\002\000\006\016\050\047\073\001" +
    "\002\000\044\004\043\011\041\012\040\020\021\027\015" +
    "\031\016\032\046\035\014\036\045\041\042\042\031\046" +
    "\024\050\020\052\022\053\023\054\032\055\025\001\002" +
    "\000\062\004\043\005\uffa5\010\uffa5\011\041\012\040\016" +
    "\uffa5\017\uffa5\020\021\023\uffa5\027\015\030\uffa5\031\016" +
    "\032\046\035\014\036\045\041\042\042\031\046\024\047" +
    "\uffa5\050\020\052\022\053\023\054\032\055\025\001\002" +
    "\000\006\016\050\023\077\001\002\000\020\005\uffb8\010" +
    "\uffb8\016\uffb8\017\uffb8\023\uffb8\030\uffb8\047\uffb8\001\002" +
    "\000\004\007\100\001\002\000\044\004\043\011\041\012" +
    "\040\020\021\027\015\031\016\032\046\035\014\036\045" +
    "\041\042\042\031\046\024\050\020\052\022\053\023\054" +
    "\032\055\025\001\002\000\006\010\102\016\050\001\002" +
    "\000\062\004\uffa6\005\uffa6\010\uffa6\011\uffa6\012\uffa6\016" +
    "\uffa6\017\uffa6\020\uffa6\023\uffa6\027\uffa6\030\uffa6\031\uffa6" +
    "\032\uffa6\035\uffa6\036\uffa6\041\uffa6\042\uffa6\046\uffa6\047" +
    "\uffa6\050\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\001\002" +
    "\000\020\005\uffa4\010\uffa4\016\uffa4\017\uffa4\023\uffa4\030" +
    "\uffa4\047\uffa4\001\002\000\026\005\uffbe\010\uffbe\013\uffbe" +
    "\016\uffbe\017\uffbe\021\uffbe\022\uffbe\023\uffbe\030\uffbe\047" +
    "\uffbe\001\002\000\026\005\uffbd\010\uffbd\013\uffbd\016\uffbd" +
    "\017\uffbd\021\uffbd\022\uffbd\023\uffbd\030\uffbd\047\uffbd\001" +
    "\002\000\004\004\107\001\002\000\046\004\043\005\uffb2" +
    "\011\041\012\040\020\021\027\015\031\016\032\046\035" +
    "\014\036\045\041\042\042\031\046\024\050\020\052\022" +
    "\053\023\054\032\055\025\001\002\000\004\005\111\001" +
    "\002\000\020\005\uffbb\010\uffbb\016\uffbb\017\uffbb\023\uffbb" +
    "\030\uffbb\047\uffbb\001\002\000\046\004\043\005\uffb2\011" +
    "\041\012\040\020\021\027\015\031\016\032\046\035\014" +
    "\036\045\041\042\042\031\046\024\050\020\052\022\053" +
    "\023\054\032\055\025\001\002\000\004\005\114\001\002" +
    "\000\020\005\uffb6\010\uffb6\016\uffb6\017\uffb6\023\uffb6\030" +
    "\uffb6\047\uffb6\001\002\000\004\040\122\001\002\000\006" +
    "\017\uffc7\040\uffc7\001\002\000\006\017\120\040\uffc4\001" +
    "\002\000\010\031\016\040\uffc5\055\116\001\002\000\004" +
    "\040\uffc3\001\002\000\044\004\043\011\041\012\040\020" +
    "\021\027\015\031\016\032\046\035\014\036\045\041\042" +
    "\042\031\046\024\050\020\052\022\053\023\054\032\055" +
    "\025\001\002\000\020\005\uffb7\010\uffb7\016\uffb7\017\uffb7" +
    "\023\uffb7\030\uffb7\047\uffb7\001\002\000\026\005\uffa3\010" +
    "\uffa3\013\uffa3\016\uffa3\017\uffa3\021\uffa3\022\uffa3\023\uffa3" +
    "\030\uffa3\047\uffa3\001\002\000\026\005\uffc2\010\uffc2\013" +
    "\uffc2\016\uffc2\017\uffc2\021\uffc2\022\uffc2\023\uffc2\030\uffc2" +
    "\047\uffc2\001\002\000\026\005\uffc0\010\uffc0\013\uffc0\016" +
    "\uffc0\017\uffc0\021\uffc0\022\uffc0\023\uffc0\030\uffc0\047\uffc0" +
    "\001\002\000\026\005\uffae\010\uffae\013\uffae\016\uffae\017" +
    "\uffae\021\uffae\022\uffae\023\uffae\030\uffae\047\uffae\001\002" +
    "\000\004\006\131\001\002\000\004\007\132\001\002\000" +
    "\056\004\142\007\140\011\137\012\136\020\135\024\134" +
    "\027\200\032\172\035\171\036\170\041\167\042\160\043" +
    "\157\044\156\045\155\046\154\050\151\051\177\052\150" +
    "\053\175\054\141\055\143\001\002\000\032\005\uffcb\010" +
    "\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\022\uffcb" +
    "\023\uffcb\030\uffcb\037\uffcb\047\uffcb\001\002\000\014\004" +
    "\142\035\171\046\154\052\150\053\175\001\002\000\036" +
    "\004\142\007\140\011\137\012\136\024\134\027\200\032" +
    "\172\035\171\046\154\050\151\051\177\052\150\053\175" +
    "\055\333\001\002\000\006\020\135\055\224\001\002\000" +
    "\006\020\135\055\224\001\002\000\056\004\142\007\140" +
    "\011\137\012\136\020\135\024\134\027\200\032\172\035" +
    "\171\036\170\041\167\042\160\043\157\044\156\045\155" +
    "\046\154\050\151\051\177\052\150\053\175\054\141\055" +
    "\143\001\002\000\004\004\324\001\002\000\016\004\142" +
    "\024\134\035\171\046\154\052\150\053\175\001\002\000" +
    "\032\005\ufffd\007\317\010\ufffd\013\uffea\014\ufffd\015\ufffd" +
    "\016\ufffd\017\ufffd\022\ufffd\023\ufffd\030\ufffd\047\ufffd\001" +
    "\002\000\032\005\ufff9\010\ufff9\013\ufff9\014\ufff9\015\ufff9" +
    "\016\ufff9\017\ufff9\022\ufff9\023\ufff9\030\ufff9\037\ufff9\047" +
    "\ufff9\001\002\000\026\005\ufff7\010\ufff7\014\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\022\ufff7\023\ufff7\030\ufff7\047\ufff7\001" +
    "\002\000\026\005\uffef\010\uffef\014\uffef\015\uffef\016\uffef" +
    "\017\uffef\022\uffef\023\uffef\030\uffef\047\uffef\001\002\000" +
    "\026\005\uffed\010\uffed\014\uffed\015\uffed\016\uffed\017\uffed" +
    "\022\uffed\023\uffed\030\uffed\047\uffed\001\002\000\042\005" +
    "\uffdb\010\uffdb\011\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\030" +
    "\uffdb\037\uffdb\047\uffdb\001\002\000\032\005\uffc8\010\uffc8" +
    "\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\022\uffc8\023" +
    "\uffc8\030\uffc8\037\uffc8\047\uffc8\001\002\000\006\010\316" +
    "\016\203\001\002\000\042\005\uffdc\010\uffdc\011\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\022\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\026\uffdc\030\uffdc\037\uffdc\047\uffdc\001" +
    "\002\000\042\005\uffde\010\uffde\011\uffde\013\uffde\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\022\uffde\023\uffde\024\uffde\025" +
    "\uffde\026\uffde\030\uffde\037\uffde\047\uffde\001\002\000\004" +
    "\004\306\001\002\000\004\004\276\001\002\000\004\007" +
    "\263\001\002\000\004\055\256\001\002\000\032\005\ufffe" +
    "\010\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\022" +
    "\ufffe\023\ufffe\030\ufffe\037\ufffe\047\ufffe\001\002\000\042" +
    "\005\uffd7\010\uffd7\011\uffd7\013\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7" +
    "\030\uffd7\037\uffd7\047\uffd7\001\002\000\042\005\uffd4\010" +
    "\uffd4\011\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\030\uffd4\037" +
    "\uffd4\047\uffd4\001\002\000\042\005\uffd1\010\uffd1\011\251" +
    "\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\025\250\026\uffd1\030\uffd1\037\uffd1\047\uffd1" +
    "\001\002\000\036\005\uffd0\010\uffd0\013\uffd0\014\uffd0\015" +
    "\uffd0\016\uffd0\017\uffd0\022\uffd0\023\uffd0\024\246\026\245" +
    "\030\uffd0\037\uffd0\047\uffd0\001\002\000\004\013\241\001" +
    "\002\000\056\004\142\007\140\011\137\012\136\020\135" +
    "\024\134\027\200\032\172\035\171\036\170\041\167\042" +
    "\160\043\157\044\156\045\155\046\154\050\151\051\177" +
    "\052\150\053\175\054\141\055\143\001\002\000\004\004" +
    "\210\001\002\000\042\005\uffdd\010\uffdd\011\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\016\uffdd\017\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\030\uffdd\037\uffdd\047\uffdd\001\002" +
    "\000\032\005\uffff\010\uffff\013\uffff\014\uffff\015\uffff\016" +
    "\uffff\017\uffff\022\uffff\023\uffff\030\uffff\037\uffff\047\uffff" +
    "\001\002\000\032\005\uffce\010\uffce\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\017\uffce\022\uffce\023\uffce\030\uffce\037\uffce" +
    "\047\uffce\001\002\000\032\005\uffcc\010\uffcc\013\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\017\uffcc\022\uffcc\023\uffcc\030\uffcc" +
    "\037\uffcc\047\uffcc\001\002\000\042\005\uffda\010\uffda\011" +
    "\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\030\uffda\037\uffda\047" +
    "\uffda\001\002\000\032\005\uffcf\010\uffcf\013\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\017\uffcf\022\uffcf\023\uffcf\030\uffcf\037" +
    "\uffcf\047\uffcf\001\002\000\032\005\uffcd\010\uffcd\013\uffcd" +
    "\014\uffcd\015\uffcd\016\uffcd\017\uffcd\022\uffcd\023\uffcd\030" +
    "\uffcd\037\uffcd\047\uffcd\001\002\000\056\004\142\007\140" +
    "\011\137\012\136\020\135\024\134\027\200\032\172\035" +
    "\171\036\170\041\167\042\160\043\157\044\156\045\155" +
    "\046\154\050\151\051\177\052\150\053\175\054\141\055" +
    "\143\001\002\000\004\030\207\001\002\000\014\005\uffec" +
    "\010\uffec\016\203\017\204\030\uffec\001\002\000\056\004" +
    "\142\007\140\011\137\012\136\020\135\024\134\027\200" +
    "\032\172\035\171\036\170\041\167\042\160\043\157\044" +
    "\156\045\155\046\154\050\151\051\177\052\150\053\175" +
    "\054\141\055\143\001\002\000\056\004\142\007\140\011" +
    "\137\012\136\020\135\024\134\027\200\032\172\035\171" +
    "\036\170\041\167\042\160\043\157\044\156\045\155\046" +
    "\154\050\151\051\177\052\150\053\175\054\141\055\143" +
    "\001\002\000\010\005\uffeb\010\uffeb\030\uffeb\001\002\000" +
    "\026\005\uffee\010\uffee\014\uffee\015\uffee\016\uffee\017\uffee" +
    "\022\uffee\023\uffee\030\uffee\047\uffee\001\002\000\032\005" +
    "\uffca\010\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca" +
    "\022\uffca\023\uffca\030\uffca\037\uffca\047\uffca\001\002\000" +
    "\024\020\021\027\015\031\016\035\014\046\024\050\020" +
    "\052\022\053\023\055\025\001\002\000\004\021\222\001" +
    "\002\000\004\005\216\001\002\000\010\005\uffe6\022\214" +
    "\023\uffe6\001\002\000\024\020\021\027\015\031\016\035" +
    "\014\046\024\050\020\052\022\053\023\055\025\001\002" +
    "\000\006\005\uffe5\023\uffe5\001\002\000\004\007\217\001" +
    "\002\000\056\004\142\007\140\011\137\012\136\020\135" +
    "\024\134\027\200\032\172\035\171\036\170\041\167\042" +
    "\160\043\157\044\156\045\155\046\154\050\151\051\177" +
    "\052\150\053\175\054\141\055\143\001\002\000\006\010" +
    "\221\016\203\001\002\000\026\005\ufff4\010\ufff4\014\ufff4" +
    "\015\ufff4\016\ufff4\017\ufff4\022\ufff4\023\ufff4\030\ufff4\047" +
    "\ufff4\001\002\000\006\020\135\055\224\001\002\000\016" +
    "\005\uffe8\014\uffe8\015\uffe8\022\uffe8\023\uffe8\037\225\001" +
    "\002\000\032\005\uffea\010\uffea\013\uffea\014\uffea\015\uffea" +
    "\016\uffea\017\uffea\022\uffea\023\uffea\030\uffea\037\uffea\047" +
    "\uffea\001\002\000\056\004\142\007\140\011\137\012\136" +
    "\020\135\024\134\027\200\032\172\035\171\036\170\041" +
    "\167\042\160\043\157\044\156\045\155\046\154\050\151" +
    "\051\177\052\150\053\175\054\141\055\143\001\002\000" +
    "\016\005\uffe7\014\uffe7\015\uffe7\016\203\022\uffe7\023\uffe7" +
    "\001\002\000\006\016\203\047\230\001\002\000\044\004" +
    "\043\011\041\012\040\020\021\027\015\031\016\032\046" +
    "\035\014\036\045\041\042\042\031\046\024\050\020\052" +
    "\022\053\023\054\032\055\025\001\002\000\070\004\043" +
    "\005\uffe3\010\uffe3\011\041\012\040\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\021\022\uffe3\023\uffe3\027\015\030\uffe3" +
    "\031\016\032\046\035\014\036\045\041\042\042\031\046" +
    "\024\047\uffe3\050\020\052\022\053\023\054\032\055\025" +
    "\001\002\000\026\005\ufff2\010\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\017\ufff2\022\ufff2\023\ufff2\030\ufff2\047\ufff2\001\002" +
    "\000\006\016\050\023\234\001\002\000\004\007\235\001" +
    "\002\000\056\004\142\007\140\011\137\012\136\020\135" +
    "\024\134\027\200\032\172\035\171\036\170\041\167\042" +
    "\160\043\157\044\156\045\155\046\154\050\151\051\177" +
    "\052\150\053\175\054\141\055\143\001\002\000\006\010" +
    "\237\016\203\001\002\000\070\004\uffe4\005\uffe4\010\uffe4" +
    "\011\uffe4\012\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\022\uffe4\023\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\035\uffe4\036\uffe4\041\uffe4\042\uffe4\046\uffe4\047\uffe4\050" +
    "\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\001\002\000\026" +
    "\005\uffe2\010\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\022" +
    "\uffe2\023\uffe2\030\uffe2\047\uffe2\001\002\000\004\004\242" +
    "\001\002\000\056\004\142\007\140\011\137\012\136\020" +
    "\135\024\134\027\200\032\172\035\171\036\170\041\167" +
    "\042\160\043\157\044\156\045\155\046\154\050\151\051" +
    "\177\052\150\053\175\054\141\055\143\001\002\000\004" +
    "\005\244\001\002\000\026\005\ufff8\010\ufff8\014\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\022\ufff8\023\ufff8\030\ufff8\047\ufff8" +
    "\001\002\000\016\004\142\024\134\035\171\046\154\052" +
    "\150\053\175\001\002\000\016\004\142\024\134\035\171" +
    "\046\154\052\150\053\175\001\002\000\042\005\uffd2\010" +
    "\uffd2\011\251\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\250\026\uffd2\030\uffd2\037" +
    "\uffd2\047\uffd2\001\002\000\016\004\142\024\134\035\171" +
    "\046\154\052\150\053\175\001\002\000\016\004\142\024" +
    "\134\035\171\046\154\052\150\053\175\001\002\000\042" +
    "\005\uffd6\010\uffd6\011\uffd6\013\uffd6\014\uffd6\015\uffd6\016" +
    "\uffd6\017\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\030\uffd6\037\uffd6\047\uffd6\001\002\000\042\005\uffd5\010" +
    "\uffd5\011\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5" +
    "\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\030\uffd5\037" +
    "\uffd5\047\uffd5\001\002\000\042\005\uffd3\010\uffd3\011\251" +
    "\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\022\uffd3\023" +
    "\uffd3\024\uffd3\025\250\026\uffd3\030\uffd3\037\uffd3\047\uffd3" +
    "\001\002\000\004\040\261\001\002\000\006\017\257\040" +
    "\uff9a\001\002\000\004\055\256\001\002\000\004\040\uff99" +
    "\001\002\000\056\004\142\007\140\011\137\012\136\020" +
    "\135\024\134\027\200\032\172\035\171\036\170\041\167" +
    "\042\160\043\157\044\156\045\155\046\154\050\151\051" +
    "\177\052\150\053\175\054\141\055\143\001\002\000\026" +
    "\005\ufff1\010\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\022" +
    "\ufff1\023\ufff1\030\ufff1\047\ufff1\001\002\000\004\033\266" +
    "\001\002\000\004\010\275\001\002\000\006\010\uffe0\033" +
    "\266\001\002\000\024\020\021\027\015\031\016\035\014" +
    "\046\024\050\020\052\022\053\023\055\025\001\002\000" +
    "\004\023\270\001\002\000\004\007\271\001\002\000\056" +
    "\004\142\007\140\011\137\012\136\020\135\024\134\027" +
    "\200\032\172\035\171\036\170\041\167\042\160\043\157" +
    "\044\156\045\155\046\154\050\151\051\177\052\150\053" +
    "\175\054\141\055\143\001\002\000\006\010\273\016\203" +
    "\001\002\000\006\010\uffe1\033\uffe1\001\002\000\004\010" +
    "\uffdf\001\002\000\026\005\ufff3\010\ufff3\014\ufff3\015\ufff3" +
    "\016\ufff3\017\ufff3\022\ufff3\023\ufff3\030\ufff3\047\ufff3\001" +
    "\002\000\024\020\021\027\015\031\016\035\014\046\024" +
    "\050\020\052\022\053\023\055\025\001\002\000\004\014" +
    "\300\001\002\000\024\020\021\027\015\031\016\035\014" +
    "\046\024\050\020\052\022\053\023\055\025\001\002\000" +
    "\004\005\302\001\002\000\004\007\303\001\002\000\056" +
    "\004\142\007\140\011\137\012\136\020\135\024\134\027" +
    "\200\032\172\035\171\036\170\041\167\042\160\043\157" +
    "\044\156\045\155\046\154\050\151\051\177\052\150\053" +
    "\175\054\141\055\143\001\002\000\006\010\305\016\203" +
    "\001\002\000\026\005\ufff6\010\ufff6\014\ufff6\015\ufff6\016" +
    "\ufff6\017\ufff6\022\ufff6\023\ufff6\030\ufff6\047\ufff6\001\002" +
    "\000\024\020\021\027\015\031\016\035\014\046\024\050" +
    "\020\052\022\053\023\055\025\001\002\000\004\015\310" +
    "\001\002\000\024\020\021\027\015\031\016\035\014\046" +
    "\024\050\020\052\022\053\023\055\025\001\002\000\004" +
    "\005\312\001\002\000\004\007\313\001\002\000\056\004" +
    "\142\007\140\011\137\012\136\020\135\024\134\027\200" +
    "\032\172\035\171\036\170\041\167\042\160\043\157\044" +
    "\156\045\155\046\154\050\151\051\177\052\150\053\175" +
    "\054\141\055\143\001\002\000\006\010\315\016\203\001" +
    "\002\000\026\005\ufff5\010\ufff5\014\ufff5\015\ufff5\016\ufff5" +
    "\017\ufff5\022\ufff5\023\ufff5\030\ufff5\047\ufff5\001\002\000" +
    "\004\002\000\001\002\000\056\004\142\007\140\011\137" +
    "\012\136\020\135\024\134\027\200\032\172\035\171\036" +
    "\170\041\167\042\160\043\157\044\156\045\155\046\154" +
    "\050\151\051\177\052\150\053\175\054\141\055\143\001" +
    "\002\000\004\010\321\001\002\000\032\005\uffc9\010\uffc9" +
    "\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\022\uffc9\023" +
    "\uffc9\030\uffc9\037\uffc9\047\uffc9\001\002\000\004\005\323" +
    "\001\002\000\042\005\uffd9\010\uffd9\011\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\016\uffd9\017\uffd9\022\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\030\uffd9\037\uffd9\047\uffd9\001\002\000" +
    "\056\004\142\007\140\011\137\012\136\020\135\024\134" +
    "\027\200\032\172\035\171\036\170\041\167\042\160\043" +
    "\157\044\156\045\155\046\154\050\151\051\177\052\150" +
    "\053\175\054\141\055\143\001\002\000\004\005\326\001" +
    "\002\000\026\005\ufff0\010\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\017\ufff0\022\ufff0\023\ufff0\030\ufff0\047\ufff0\001\002\000" +
    "\006\010\330\016\203\001\002\000\032\005\ufffc\010\ufffc" +
    "\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\022\ufffc\023" +
    "\ufffc\030\ufffc\037\ufffc\047\ufffc\001\002\000\032\005\ufffb" +
    "\010\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\022" +
    "\ufffb\023\ufffb\030\ufffb\037\ufffb\047\ufffb\001\002\000\032" +
    "\005\ufffa\010\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017" +
    "\ufffa\022\ufffa\023\ufffa\030\ufffa\037\ufffa\047\ufffa\001\002" +
    "\000\034\005\ufffd\007\317\010\ufffd\013\ufffd\014\ufffd\015" +
    "\ufffd\016\ufffd\017\ufffd\022\ufffd\023\ufffd\030\ufffd\037\ufffd" +
    "\047\ufffd\001\002\000\032\005\uffe9\010\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\016\uffe9\017\uffe9\022\uffe9\023\uffe9\030\uffe9" +
    "\037\uffe9\047\uffe9\001\002\000\042\005\uffd8\010\uffd8\011" +
    "\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\026\uffd8\030\uffd8\037\uffd8\047" +
    "\uffd8\001\002\000\004\030\337\001\002\000\026\005\uffa2" +
    "\010\uffa2\013\uffa2\016\uffa2\017\uffa2\021\uffa2\022\uffa2\023" +
    "\uffa2\030\uffa2\047\uffa2\001\002\000\026\005\uffac\020\021" +
    "\027\015\031\016\035\014\046\024\050\020\052\022\053" +
    "\023\055\025\001\002\000\004\005\uffaa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\032\010\042\012\043\016\050\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\032\027\034\033\035\034\036\035\037\036\040" +
    "\046\041\335\042\032\050\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\032\124\034" +
    "\033\035\126\050\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\032" +
    "\027\034\033\035\034\036\035\037\036\040\046\041\026" +
    "\042\032\050\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\032\116\033\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\032\010\042\104" +
    "\050\011\001\001\000\010\032\010\042\103\050\011\001" +
    "\001\000\022\032\027\034\033\035\034\036\035\037\036" +
    "\040\071\042\032\050\043\001\001\000\022\032\027\034" +
    "\033\035\034\036\035\037\036\040\067\042\032\050\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\032\027\034\033\035\034" +
    "\036\035\037\052\042\032\050\043\001\001\000\024\032" +
    "\027\034\033\035\034\036\035\037\036\040\046\041\051" +
    "\042\032\050\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\032\010\042\054\044\055\045\056\050\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\032\027\034\033\035\034" +
    "\036\035\037\036\040\061\042\032\050\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\032\010\042\054" +
    "\044\055\045\064\050\011\001\001\000\002\001\001\000" +
    "\010\032\010\042\066\050\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\032\027\034\033\035\034\036\035\037\036\040\074" +
    "\042\032\046\073\047\075\050\043\001\001\000\026\032" +
    "\027\034\033\035\034\036\035\037\036\040\074\042\032" +
    "\046\073\047\102\050\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\032\027\034\033" +
    "\035\034\036\035\037\036\040\100\042\032\050\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\032\027\034\033\035\034\036\035\037\036\040\046" +
    "\041\107\042\032\050\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\032\027\034\033\035\034\036\035" +
    "\037\036\040\046\041\112\042\032\050\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\032\116\033\120\001" +
    "\001\000\002\001\001\000\020\032\027\034\033\035\034" +
    "\036\035\037\122\042\032\050\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\003\143\004\144\005\145\006\146\007\151\011\165" +
    "\020\152\021\161\022\162\023\163\024\164\025\175\026" +
    "\160\027\172\030\173\031\132\001\001\000\002\001\001" +
    "\000\006\020\152\021\334\001\001\000\032\003\143\004" +
    "\333\020\152\021\161\022\162\023\163\024\164\025\175" +
    "\026\160\027\172\030\173\031\132\001\001\000\004\011" +
    "\331\001\001\000\004\011\330\001\001\000\042\003\143" +
    "\004\144\005\145\006\146\007\326\011\165\020\152\021" +
    "\161\022\162\023\163\024\164\025\175\026\160\027\172" +
    "\030\173\031\132\001\001\000\002\001\001\000\016\020" +
    "\152\021\161\022\162\023\163\024\164\025\321\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\003\143\004\144\005\145\006" +
    "\146\007\226\011\165\020\152\021\161\022\162\023\163" +
    "\024\164\025\175\026\160\027\172\030\173\031\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\003\143\004\144" +
    "\005\145\006\146\007\201\010\200\011\165\020\152\021" +
    "\161\022\162\023\163\024\164\025\175\026\160\027\172" +
    "\030\173\031\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\143\004\144\005\145\006\205\011\165" +
    "\020\152\021\161\022\162\023\163\024\164\025\175\026" +
    "\160\027\172\030\173\031\132\001\001\000\044\003\143" +
    "\004\144\005\145\006\146\007\201\010\204\011\165\020" +
    "\152\021\161\022\162\023\163\024\164\025\175\026\160" +
    "\027\172\030\173\031\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\012\212\013\211" +
    "\032\010\042\210\050\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\012\212\013\214" +
    "\032\010\042\210\050\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\003\143\004\144\005\145\006\146" +
    "\007\217\011\165\020\152\021\161\022\162\023\163\024" +
    "\164\025\175\026\160\027\172\030\173\031\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\003\143" +
    "\004\144\005\145\006\146\007\225\011\165\020\152\021" +
    "\161\022\162\023\163\024\164\025\175\026\160\027\172" +
    "\030\173\031\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\014\230\015\231\032\027\034\033\035\034" +
    "\036\035\037\036\040\232\042\032\050\043\001\001\000" +
    "\026\014\230\015\237\032\027\034\033\035\034\036\035" +
    "\037\036\040\232\042\032\050\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\003\143" +
    "\004\144\005\145\006\146\007\235\011\165\020\152\021" +
    "\161\022\162\023\163\024\164\025\175\026\160\027\172" +
    "\030\173\031\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\003\143" +
    "\004\144\005\145\006\146\007\201\010\242\011\165\020" +
    "\152\021\161\022\162\023\163\024\164\025\175\026\160" +
    "\027\172\030\173\031\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\020\152\021\161\022\162\023\253" +
    "\001\001\000\012\020\152\021\161\022\162\023\246\001" +
    "\001\000\002\001\001\000\010\020\152\021\161\022\252" +
    "\001\001\000\010\020\152\021\161\022\251\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\257\001\001\000" +
    "\002\001\001\000\040\003\143\004\144\005\145\006\261" +
    "\011\165\020\152\021\161\022\162\023\163\024\164\025" +
    "\175\026\160\027\172\030\173\031\132\001\001\000\002" +
    "\001\001\000\006\016\264\017\263\001\001\000\002\001" +
    "\001\000\006\016\264\017\273\001\001\000\014\012\212" +
    "\013\266\032\010\042\210\050\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\143\004\144\005\145" +
    "\006\146\007\271\011\165\020\152\021\161\022\162\023" +
    "\163\024\164\025\175\026\160\027\172\030\173\031\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\276\032\010\042\210" +
    "\050\011\001\001\000\002\001\001\000\012\012\300\032" +
    "\010\042\210\050\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\003\143\004\144\005\145\006\146\007" +
    "\303\011\165\020\152\021\161\022\162\023\163\024\164" +
    "\025\175\026\160\027\172\030\173\031\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\306\032\010" +
    "\042\210\050\011\001\001\000\002\001\001\000\012\012" +
    "\310\032\010\042\210\050\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\003\143\004\144\005\145\006" +
    "\146\007\313\011\165\020\152\021\161\022\162\023\163" +
    "\024\164\025\175\026\160\027\172\030\173\031\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\003\143\004\144\005\145\006\146\007\201\010" +
    "\317\011\165\020\152\021\161\022\162\023\163\024\164" +
    "\025\175\026\160\027\172\030\173\031\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\003\143\004\144\005\145\006\146\007" +
    "\201\010\324\011\165\020\152\021\161\022\162\023\163" +
    "\024\164\025\175\026\160\027\172\030\173\031\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\032\010\042\012\043" +
    "\340\050\011\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public coop.rchain.syntax.rholang.Absyn.Contr pContr() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (coop.rchain.syntax.rholang.Absyn.Contr) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ListName ::= Name _SYMB_11 ListName 
            {
              coop.rchain.syntax.rholang.Absyn.ListName RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListName p_3 = (coop.rchain.syntax.rholang.Absyn.ListName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListName",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ListName ::= Name 
            {
              coop.rchain.syntax.rholang.Absyn.ListName RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListName(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListName",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ListVar ::= Var _SYMB_11 ListVar 
            {
              coop.rchain.syntax.rholang.Absyn.ListVar RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListVar p_3 = (coop.rchain.syntax.rholang.Absyn.ListVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVar",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ListVar ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.ListVar RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListVar(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVar",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ListValPattern ::= ValPattern _SYMB_11 ListValPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListValPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ValPattern p_1 = (coop.rchain.syntax.rholang.Absyn.ValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListValPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListValPattern",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ListValPattern ::= ValPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListValPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ValPattern p_1 = (coop.rchain.syntax.rholang.Absyn.ValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListValPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListValPattern",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ValPattern ::= _STRING_ 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtStr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ValPattern ::= _DOUBLE_ 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtDbl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ValPattern ::= _INTEGER_ 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ValPattern ::= _SYMB_25 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ValPattern ::= _SYMB_34 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ValPattern ::= _SYMB_19 ListPPattern _SYMB_20 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_2 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtTuple(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ValPattern ::= Var _SYMB_3 ListPPattern _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtStruct(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ListPatternPatternMatch ::= PatternPatternMatch ListPatternPatternMatch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternPatternMatch p_1 = (coop.rchain.syntax.rholang.Absyn.PatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch p_2 = (coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternPatternMatch",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ListPatternPatternMatch ::= PatternPatternMatch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternPatternMatch p_1 = (coop.rchain.syntax.rholang.Absyn.PatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternPatternMatch",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PatternPatternMatch ::= PPattern _SYMB_15 _SYMB_3 PPattern _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.PatternPatternMatch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_4 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PtBranch(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PatternPatternMatch",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ListPatternBind ::= PatternBind _SYMB_14 ListPatternBind 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternBind p_1 = (coop.rchain.syntax.rholang.Absyn.PatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPatternBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListPatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternBind",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ListPatternBind ::= PatternBind 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternBind p_1 = (coop.rchain.syntax.rholang.Absyn.PatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPatternBind(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternBind",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PatternBind ::= CPattern _SYMB_13 CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PatternBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.CPattern p_3 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PtBind(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PatternBind",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ListCPattern ::= CPattern _SYMB_11 ListCPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListCPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListCPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListCPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCPattern",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ListCPattern ::= CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListCPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListCPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCPattern",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ListCPattern ::= 
            {
              coop.rchain.syntax.rholang.Absyn.ListCPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListCPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCPattern",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CPattern ::= ValPattern 
            {
              coop.rchain.syntax.rholang.Absyn.CPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ValPattern p_1 = (coop.rchain.syntax.rholang.Absyn.ValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CValPtrn(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPattern",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CPattern ::= _SYMB_12 PPattern3 
            {
              coop.rchain.syntax.rholang.Absyn.CPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_2 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CPtQuote(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPattern",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CPattern ::= VarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.CPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CPtVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPattern",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ListPPattern ::= PPattern _SYMB_11 ListPPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListPPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPPattern",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ListPPattern ::= PPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListPPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPPattern",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ListPPattern ::= 
            {
              coop.rchain.syntax.rholang.Absyn.ListPPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPPattern",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PPattern ::= PPattern1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PPattern ::= PPattern _SYMB_10 PPattern1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_3 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtPar(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PPattern1 ::= PPattern2 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PPattern1 ::= Name _SYMB_0 ListPPattern _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PPattern1 ::= _SYMB_30 ListVarPattern _SYMB_28 PPattern1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListVarPattern p_2 = (coop.rchain.syntax.rholang.Absyn.ListVarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_4 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtNew(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PPattern1 ::= _SYMB_29 PPattern _SYMB_35 ListPatternPatternMatch 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_2 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch p_4 = (coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtMatch(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PPattern1 ::= _SYMB_26 _SYMB_0 ListPatternBind _SYMB_1 _SYMB_3 PPattern _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListPatternBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListPatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_6 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtInput(p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PPattern2 ::= PPattern3 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern2",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PPattern2 ::= CPattern _SYMB_7 _SYMB_0 ListPPattern _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_4 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtOutput(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern2",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PPattern3 ::= PPattern4 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern3",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PPattern3 ::= _SYMB_6 CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_2 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtInject(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern3",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PPattern3 ::= _SYMB_5 CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_2 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtDrop(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern3",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PPattern4 ::= _SYMB_0 PPattern _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_2 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PPattern4 ::= ValPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ValPattern p_1 = (coop.rchain.syntax.rholang.Absyn.ValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtVal(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PPattern4 ::= _SYMB_22 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtNil(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PPattern4 ::= VarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ListVarPattern ::= VarPattern _SYMB_11 ListVarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListVarPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListVarPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListVarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVarPattern",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ListVarPattern ::= VarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListVarPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListVarPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVarPattern",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ListVarPattern ::= 
            {
              coop.rchain.syntax.rholang.Absyn.ListVarPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListVarPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVarPattern",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VarPattern ::= _SYMB_21 
            {
              coop.rchain.syntax.rholang.Absyn.VarPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VarPtWild(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarPattern",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VarPattern ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.VarPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VarPtVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarPattern",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Collect ::= _STRING_ 
            {
              coop.rchain.syntax.rholang.Absyn.Collect RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CString(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Collect",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Struct ::= Var _SYMB_3 ListProc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Struct RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_3 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.StructConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Struct",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Entity ::= _SYMB_19 ListProc _SYMB_20 
            {
              coop.rchain.syntax.rholang.Absyn.Entity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListProc p_2 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ETuple(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Entity ::= Collect 
            {
              coop.rchain.syntax.rholang.Absyn.Entity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Collect p_1 = (coop.rchain.syntax.rholang.Absyn.Collect)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ECollect(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Entity ::= Struct 
            {
              coop.rchain.syntax.rholang.Absyn.Entity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Struct p_1 = (coop.rchain.syntax.rholang.Absyn.Struct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.EStruct(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Entity ::= _CHAR_ 
            {
              coop.rchain.syntax.rholang.Absyn.Entity RESULT =null;
		Character p_1 = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.EChar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Value ::= Entity 
            {
              coop.rchain.syntax.rholang.Absyn.Value RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Entity p_1 = (coop.rchain.syntax.rholang.Absyn.Entity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VEnt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Value ::= Quantity 
            {
              coop.rchain.syntax.rholang.Absyn.Value RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VQuant(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Quantity ::= Quantity1 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Quantity1 ::= Quantity2 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity1",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Quantity1 ::= Quantity1 _SYMB_16 Quantity2 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QMinus(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity1",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Quantity1 ::= Quantity1 _SYMB_18 Quantity2 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QAdd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity1",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Quantity2 ::= Quantity3 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity2",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Quantity2 ::= Quantity2 _SYMB_17 Quantity3 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QDiv(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity2",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Quantity2 ::= Quantity2 _SYMB_5 Quantity3 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QMult(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity2",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Quantity3 ::= Quantity4 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity3",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Quantity3 ::= _SYMB_16 Quantity4 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_2 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QNeg(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity3",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Quantity4 ::= _SYMB_0 Quantity _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_2 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity4",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Quantity4 ::= _DOUBLE_ 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QDouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity4",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Quantity4 ::= _INTEGER_ 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity4",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Quantity4 ::= RhoBool 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.RhoBool p_1 = (coop.rchain.syntax.rholang.Absyn.RhoBool)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QBool(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity4",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RhoBool ::= _SYMB_25 
            {
              coop.rchain.syntax.rholang.Absyn.RhoBool RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RhoBool",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RhoBool ::= _SYMB_34 
            {
              coop.rchain.syntax.rholang.Absyn.RhoBool RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RhoBool",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ListCBranch ::= CBranch ListCBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListCBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CBranch p_1 = (coop.rchain.syntax.rholang.Absyn.CBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		coop.rchain.syntax.rholang.Absyn.ListCBranch p_2 = (coop.rchain.syntax.rholang.Absyn.ListCBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCBranch",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ListCBranch ::= CBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListCBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CBranch p_1 = (coop.rchain.syntax.rholang.Absyn.CBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListCBranch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCBranch",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CBranch ::= _SYMB_23 ListBind _SYMB_15 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.CBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListBind p_2 = (coop.rchain.syntax.rholang.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_5 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.Choice(p_2,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CBranch",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ListPMBranch ::= PMBranch ListPMBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPMBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PMBranch p_1 = (coop.rchain.syntax.rholang.Absyn.PMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		coop.rchain.syntax.rholang.Absyn.ListPMBranch p_2 = (coop.rchain.syntax.rholang.Absyn.ListPMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPMBranch",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ListPMBranch ::= PMBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPMBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PMBranch p_1 = (coop.rchain.syntax.rholang.Absyn.PMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPMBranch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPMBranch",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PMBranch ::= PPattern _SYMB_15 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.PMBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_4 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PatternMatch(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PMBranch",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListBind ::= Bind _SYMB_14 ListBind 
            {
              coop.rchain.syntax.rholang.Absyn.ListBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_1 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListBind",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListBind ::= Bind 
            {
              coop.rchain.syntax.rholang.Absyn.ListBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_1 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListBind(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListBind",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Bind ::= CPattern _SYMB_13 Chan _SYMB_27 Proc 
            {
              coop.rchain.syntax.rholang.Absyn.Bind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Chan p_3 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_5 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CondInputBind(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bind",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Bind ::= CPattern _SYMB_13 Chan 
            {
              coop.rchain.syntax.rholang.Absyn.Bind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Chan p_3 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.InputBind(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bind",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Chan ::= _SYMB_12 Proc3 
            {
              coop.rchain.syntax.rholang.Absyn.Chan RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_2 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CQuote(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Chan",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Chan ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.Chan RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Chan",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ListProc ::= Proc _SYMB_11 ListProc 
            {
              coop.rchain.syntax.rholang.Absyn.ListProc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_3 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListProc",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ListProc ::= Proc 
            {
              coop.rchain.syntax.rholang.Absyn.ListProc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListProc(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListProc",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Proc ::= Proc1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Proc ::= Proc _SYMB_10 Proc1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_3 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPar(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Proc1 ::= Proc2 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Proc1 ::= Name _SYMB_0 ListProc _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_3 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Proc1 ::= _SYMB_30 ListVar _SYMB_28 Proc1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListVar p_2 = (coop.rchain.syntax.rholang.Absyn.ListVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_4 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PNew(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Proc1 ::= _SYMB_29 Proc _SYMB_35 ListPMBranch 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_2 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPMBranch p_4 = (coop.rchain.syntax.rholang.Absyn.ListPMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PMatch(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Proc1 ::= _SYMB_31 _SYMB_3 ListCBranch _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListCBranch p_3 = (coop.rchain.syntax.rholang.Absyn.ListCBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PChoice(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Proc1 ::= _SYMB_26 _SYMB_0 ListBind _SYMB_1 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_6 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PInput(p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Proc1 ::= _SYMB_33 _SYMB_0 Bind _SYMB_9 Bind _SYMB_1 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_3 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		coop.rchain.syntax.rholang.Absyn.Bind p_5 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_8 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PFoldR(p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Proc1 ::= _SYMB_32 _SYMB_0 Bind _SYMB_8 Bind _SYMB_1 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_3 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		coop.rchain.syntax.rholang.Absyn.Bind p_5 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_8 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PFoldL(p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Proc2 ::= Proc3 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc2",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Proc2 ::= Chan _SYMB_7 _SYMB_0 ListProc _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Chan p_1 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_4 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PLift(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc2",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Proc3 ::= Proc4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Proc3 ::= _SYMB_6 Chan 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Chan p_2 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PInject(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Proc3 ::= _SYMB_5 Chan 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Chan p_2 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PDrop(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Proc4 ::= _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_2 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Proc4 ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Proc4 ::= Value 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Value p_1 = (coop.rchain.syntax.rholang.Absyn.Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PValue(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Proc4 ::= _SYMB_22 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PNil(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Contr ::= _SYMB_24 Name _SYMB_0 ListCPattern _SYMB_1 _SYMB_2 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Contr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		coop.rchain.syntax.rholang.Absyn.ListCPattern p_4 = (coop.rchain.syntax.rholang.Absyn.ListCPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_8 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.DContr(p_2,p_4,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Contr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Contr EOF 
            {
              Object RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Contr start_val = (coop.rchain.syntax.rholang.Absyn.Contr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

