
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jun 10 16:47:32 PDT 2017
//----------------------------------------------------

package coop.rchain.syntax.rholang;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jun 10 16:47:32 PDT 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\002\004\000\002\002\013\000\002\003" +
    "\003\000\002\003\003\000\002\003\005\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\005\007\000" +
    "\002\005\003\000\002\006\013\000\002\006\013\000\002" +
    "\006\011\000\002\006\006\000\002\006\006\000\002\006" +
    "\006\000\002\006\006\000\002\006\003\000\002\007\005" +
    "\000\002\007\003\000\002\010\003\000\002\010\005\000" +
    "\002\011\003\000\002\011\004\000\002\012\005\000\002" +
    "\012\007\000\002\013\003\000\002\013\005\000\002\014" +
    "\007\000\002\015\003\000\002\015\004\000\002\016\010" +
    "\000\002\017\003\000\002\017\004\000\002\020\003\000" +
    "\002\020\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\005\000\002\022" +
    "\004\000\002\022\003\000\002\023\005\000\002\023\005" +
    "\000\002\023\003\000\002\024\005\000\002\024\005\000" +
    "\002\024\003\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\003\000\002\026" +
    "\005\000\002\026\005\000\002\026\003\000\002\027\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\005\000" +
    "\002\031\003\000\002\031\003\000\002\032\002\000\002" +
    "\032\003\000\002\032\005\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\005\000\002\034\004" +
    "\000\002\034\004\000\002\034\003\000\002\035\007\000" +
    "\002\035\003\000\002\036\011\000\002\036\006\000\002" +
    "\036\006\000\002\036\006\000\002\036\003\000\002\037" +
    "\005\000\002\037\003\000\002\040\002\000\002\040\003" +
    "\000\002\040\005\000\002\041\003\000\002\041\003\000" +
    "\002\041\004\000\002\042\002\000\002\042\003\000\002" +
    "\042\005\000\002\043\005\000\002\044\003\000\002\044" +
    "\005\000\002\045\007\000\002\046\003\000\002\046\004" +
    "\000\002\047\006\000\002\047\005\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\050\003\000\002\050\005\000\002\051" +
    "\003\000\002\051\005\000\002\052\003\000\002\052\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\004\042\004\001\002\000\004\062\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\004\010\001\002\000\026\005\uffa9\020\021\027" +
    "\016\037\013\043\011\054\022\056\020\060\023\061\024" +
    "\063\025\001\002\000\026\005\uff9d\010\uff9d\013\uff9d\016" +
    "\uff9d\017\uff9d\021\uff9d\022\uff9d\023\uff9d\031\uff9d\055\uff9d" +
    "\001\002\000\026\005\uffac\010\uffac\013\uffac\016\uffac\017" +
    "\uffac\021\uffac\022\uffac\023\uffac\031\uffac\055\uffac\001\002" +
    "\000\030\005\uffc3\010\uffc3\013\uffc3\016\uffc3\017\uffc3\021" +
    "\uffc3\022\uffc3\023\uffc3\031\uffc3\046\uffc3\055\uffc3\001\002" +
    "\000\006\005\uffa8\017\347\001\002\000\026\005\uffab\010" +
    "\uffab\013\uffab\016\uffab\017\uffab\021\uffab\022\uffab\023\uffab" +
    "\031\uffab\055\uffab\001\002\000\046\004\044\011\043\012" +
    "\042\020\021\027\016\031\uffaf\037\013\040\046\043\011" +
    "\044\032\047\030\050\027\054\022\056\020\060\023\061" +
    "\024\062\034\063\025\001\002\000\004\005\130\001\002" +
    "\000\026\005\uff9a\010\uff9a\013\uff9a\016\uff9a\017\uff9a\021" +
    "\uff9a\022\uff9a\023\uff9a\031\uff9a\055\uff9a\001\002\000\032" +
    "\004\044\011\043\012\042\027\016\037\013\040\046\043" +
    "\011\054\022\056\020\060\023\061\024\063\025\001\002" +
    "\000\026\005\uff9e\010\uff9e\013\uff9e\016\uff9e\017\uff9e\021" +
    "\uff9e\022\uff9e\023\uff9e\031\uff9e\055\uff9e\001\002\000\026" +
    "\005\uff9c\010\uff9c\013\uff9c\016\uff9c\017\uff9c\021\uff9c\022" +
    "\uff9c\023\uff9c\031\uff9c\055\uff9c\001\002\000\026\005\uff9b" +
    "\010\uff9b\013\uff9b\016\uff9b\017\uff9b\021\uff9b\022\uff9b\023" +
    "\uff9b\031\uff9b\055\uff9b\001\002\000\030\005\uffc4\007\026" +
    "\010\uffc4\013\uffc4\016\uffc4\017\uffc4\021\uffc4\022\uffc4\023" +
    "\uffc4\031\uffc4\055\uffc4\001\002\000\046\004\044\010\uffaf" +
    "\011\043\012\042\020\021\027\016\037\013\040\046\043" +
    "\011\044\032\047\030\050\027\054\022\056\020\060\023" +
    "\061\024\062\034\063\025\001\002\000\010\037\013\046" +
    "\uffc2\063\117\001\002\000\044\004\044\011\043\012\042" +
    "\020\021\027\016\037\013\040\046\043\011\044\032\047" +
    "\030\050\027\054\022\056\020\060\023\061\024\062\034" +
    "\063\025\001\002\000\004\010\103\001\002\000\004\004" +
    "\067\001\002\000\022\005\uffbf\010\uffbf\013\uffac\016\uffbf" +
    "\017\uffbf\023\uffbf\031\uffbf\055\uffbf\001\002\000\004\004" +
    "\064\001\002\000\004\013\060\001\002\000\026\005\uffb9" +
    "\010\uffb9\013\uffb9\016\uffb9\017\uffb9\021\uffb9\022\uffb9\023" +
    "\uffb9\031\uffb9\055\uffb9\001\002\000\020\005\uffb7\010\uffb7" +
    "\016\uffb7\017\uffb7\023\uffb7\031\uffb7\055\uffb7\001\002\000" +
    "\020\005\uffb2\010\uffb2\016\uffb2\017\uffb2\023\uffb2\031\uffb2" +
    "\055\uffb2\001\002\000\020\005\uffb0\010\uffb0\016\uffb0\017" +
    "\uffb0\023\uffb0\031\uffb0\055\uffb0\001\002\000\024\020\021" +
    "\027\016\037\013\043\011\054\022\056\020\060\023\061" +
    "\024\063\025\001\002\000\024\020\021\027\016\037\013" +
    "\043\011\054\022\056\020\060\023\061\024\063\025\001" +
    "\002\000\044\004\044\011\043\012\042\020\021\027\016" +
    "\037\013\040\046\043\011\044\032\047\030\050\027\054" +
    "\022\056\020\060\023\061\024\062\034\063\025\001\002" +
    "\000\022\005\uffbd\010\uffbd\013\uffab\016\uffbd\017\uffbd\023" +
    "\uffbd\031\uffbd\055\uffbd\001\002\000\026\005\uffbe\010\uffbe" +
    "\013\uffbe\016\uffbe\017\uffbe\021\uffbe\022\uffbe\023\uffbe\031" +
    "\uffbe\055\uffbe\001\002\000\014\005\uffae\010\uffae\016\050" +
    "\017\051\031\uffae\001\002\000\044\004\044\011\043\012" +
    "\042\020\021\027\016\037\013\040\046\043\011\044\032" +
    "\047\030\050\027\054\022\056\020\060\023\061\024\062" +
    "\034\063\025\001\002\000\052\004\044\005\uffaf\010\uffaf" +
    "\011\043\012\042\020\021\027\016\031\uffaf\037\013\040" +
    "\046\043\011\044\032\047\030\050\027\054\022\056\020" +
    "\060\023\061\024\062\034\063\025\001\002\000\010\005" +
    "\uffad\010\uffad\031\uffad\001\002\000\020\005\uffb1\010\uffb1" +
    "\016\uffb1\017\uffb1\023\uffb1\031\uffb1\055\uffb1\001\002\000" +
    "\006\005\055\016\050\001\002\000\026\005\uffbc\010\uffbc" +
    "\013\uffbc\016\uffbc\017\uffbc\021\uffbc\022\uffbc\023\uffbc\031" +
    "\uffbc\055\uffbc\001\002\000\026\005\uffbb\010\uffbb\013\uffbb" +
    "\016\uffbb\017\uffbb\021\uffbb\022\uffbb\023\uffbb\031\uffbb\055" +
    "\uffbb\001\002\000\026\005\uffba\010\uffba\013\uffba\016\uffba" +
    "\017\uffba\021\uffba\022\uffba\023\uffba\031\uffba\055\uffba\001" +
    "\002\000\004\004\061\001\002\000\046\004\044\005\uffaf" +
    "\011\043\012\042\020\021\027\016\037\013\040\046\043" +
    "\011\044\032\047\030\050\027\054\022\056\020\060\023" +
    "\061\024\062\034\063\025\001\002\000\004\005\063\001" +
    "\002\000\020\005\uffb8\010\uffb8\016\uffb8\017\uffb8\023\uffb8" +
    "\031\uffb8\055\uffb8\001\002\000\046\004\044\005\uffaf\011" +
    "\043\012\042\020\021\027\016\037\013\040\046\043\011" +
    "\044\032\047\030\050\027\054\022\056\020\060\023\061" +
    "\024\062\034\063\025\001\002\000\004\005\066\001\002" +
    "\000\020\005\uffb3\010\uffb3\016\uffb3\017\uffb3\023\uffb3\031" +
    "\uffb3\055\uffb3\001\002\000\024\020\021\027\016\037\013" +
    "\043\011\054\022\056\020\060\023\061\024\063\025\001" +
    "\002\000\004\021\101\001\002\000\006\005\uffa5\022\077" +
    "\001\002\000\004\005\073\001\002\000\004\007\074\001" +
    "\002\000\044\004\044\011\043\012\042\020\021\027\016" +
    "\037\013\040\046\043\011\044\032\047\030\050\027\054" +
    "\022\056\020\060\023\061\024\062\034\063\025\001\002" +
    "\000\006\010\076\016\050\001\002\000\020\005\uffb6\010" +
    "\uffb6\016\uffb6\017\uffb6\023\uffb6\031\uffb6\055\uffb6\001\002" +
    "\000\024\020\021\027\016\037\013\043\011\054\022\056" +
    "\020\060\023\061\024\063\025\001\002\000\004\005\uffa4" +
    "\001\002\000\024\020\021\027\016\037\013\043\011\054" +
    "\022\056\020\060\023\061\024\063\025\001\002\000\006" +
    "\005\uffa6\022\uffa6\001\002\000\026\005\uffa0\010\uffa0\013" +
    "\uffa0\016\uffa0\017\uffa0\021\uffa0\022\uffa0\023\uffa0\031\uffa0" +
    "\055\uffa0\001\002\000\006\016\050\055\105\001\002\000" +
    "\044\004\044\011\043\012\042\020\021\027\016\037\013" +
    "\040\046\043\011\044\032\047\030\050\027\054\022\056" +
    "\020\060\023\061\024\062\034\063\025\001\002\000\062" +
    "\004\044\005\uffa2\010\uffa2\011\043\012\042\016\uffa2\017" +
    "\uffa2\020\021\023\uffa2\027\016\031\uffa2\037\013\040\046" +
    "\043\011\044\032\047\030\050\027\054\022\055\uffa2\056" +
    "\020\060\023\061\024\062\034\063\025\001\002\000\006" +
    "\016\050\023\111\001\002\000\020\005\uffb5\010\uffb5\016" +
    "\uffb5\017\uffb5\023\uffb5\031\uffb5\055\uffb5\001\002\000\004" +
    "\007\112\001\002\000\044\004\044\011\043\012\042\020" +
    "\021\027\016\037\013\040\046\043\011\044\032\047\030" +
    "\050\027\054\022\056\020\060\023\061\024\062\034\063" +
    "\025\001\002\000\006\010\114\016\050\001\002\000\062" +
    "\004\uffa3\005\uffa3\010\uffa3\011\uffa3\012\uffa3\016\uffa3\017" +
    "\uffa3\020\uffa3\023\uffa3\027\uffa3\031\uffa3\037\uffa3\040\uffa3" +
    "\043\uffa3\044\uffa3\047\uffa3\050\uffa3\054\uffa3\055\uffa3\056" +
    "\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\001\002\000\020" +
    "\005\uffa1\010\uffa1\016\uffa1\017\uffa1\023\uffa1\031\uffa1\055" +
    "\uffa1\001\002\000\004\046\123\001\002\000\006\017\uffc4" +
    "\046\uffc4\001\002\000\006\017\121\046\uffc1\001\002\000" +
    "\010\037\013\046\uffc2\063\117\001\002\000\004\046\uffc0" +
    "\001\002\000\044\004\044\011\043\012\042\020\021\027" +
    "\016\037\013\040\046\043\011\044\032\047\030\050\027" +
    "\054\022\056\020\060\023\061\024\062\034\063\025\001" +
    "\002\000\020\005\uffb4\010\uffb4\016\uffb4\017\uffb4\023\uffb4" +
    "\031\uffb4\055\uffb4\001\002\000\026\005\uffbf\010\uffbf\013" +
    "\uffbf\016\uffbf\017\uffbf\021\uffbf\022\uffbf\023\uffbf\031\uffbf" +
    "\055\uffbf\001\002\000\026\005\uffbd\010\uffbd\013\uffbd\016" +
    "\uffbd\017\uffbd\021\uffbd\022\uffbd\023\uffbd\031\uffbd\055\uffbd" +
    "\001\002\000\026\005\uffaa\010\uffaa\013\uffaa\016\uffaa\017" +
    "\uffaa\021\uffaa\022\uffaa\023\uffaa\031\uffaa\055\uffaa\001\002" +
    "\000\004\006\131\001\002\000\004\007\132\001\002\000" +
    "\054\004\142\007\140\011\137\012\135\020\134\024\133" +
    "\035\173\040\172\043\161\044\160\047\157\050\155\051" +
    "\153\052\152\053\151\054\136\057\176\060\150\061\174" +
    "\062\141\063\143\001\002\000\016\004\142\043\161\054" +
    "\136\060\150\061\174\063\215\001\002\000\034\004\142" +
    "\007\140\011\137\012\135\024\133\035\173\040\172\043" +
    "\161\054\136\057\176\060\150\061\174\063\215\001\002" +
    "\000\006\020\134\063\253\001\002\000\056\005\uffdf\010" +
    "\uffdf\011\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\036\uffdf\045\uffdf" +
    "\055\uffdf\001\002\000\006\020\134\063\253\001\002\000" +
    "\054\004\142\007\140\011\137\012\135\020\134\024\133" +
    "\035\173\040\172\043\161\044\160\047\157\050\155\051" +
    "\153\052\152\053\151\054\136\057\176\060\150\061\174" +
    "\062\141\063\143\001\002\000\004\004\334\001\002\000" +
    "\020\004\142\024\133\043\161\054\136\060\150\061\174" +
    "\063\215\001\002\000\054\005\uffda\010\uffda\011\uffda\013" +
    "\uffeb\014\uffda\015\uffda\016\uffda\017\uffda\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\036\uffda\055\uffda\001\002\000\032" +
    "\005\ufffa\010\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017" +
    "\ufffa\022\ufffa\023\ufffa\036\ufffa\045\ufffa\055\ufffa\001\002" +
    "\000\026\005\ufff8\010\ufff8\014\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\022\ufff8\023\ufff8\036\ufff8\055\ufff8\001\002\000\026" +
    "\005\ufff0\010\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\022" +
    "\ufff0\023\ufff0\036\ufff0\055\ufff0\001\002\000\026\005\uffee" +
    "\010\uffee\014\uffee\015\uffee\016\uffee\017\uffee\022\uffee\023" +
    "\uffee\036\uffee\055\uffee\001\002\000\056\005\uffdc\010\uffdc" +
    "\011\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\033\uffdc\034\uffdc\036\uffdc\045\uffdc\055" +
    "\uffdc\001\002\000\004\004\322\001\002\000\004\004\312" +
    "\001\002\000\004\007\277\001\002\000\006\010\276\016" +
    "\201\001\002\000\004\063\271\001\002\000\056\005\uffdd" +
    "\010\uffdd\011\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd" +
    "\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\036\uffdd\045" +
    "\uffdd\055\uffdd\001\002\000\054\004\142\007\140\011\137" +
    "\012\135\020\134\024\133\035\173\040\172\043\161\044" +
    "\160\047\157\050\155\051\153\052\152\053\151\054\136" +
    "\057\176\060\150\061\174\062\141\063\143\001\002\000" +
    "\004\004\237\001\002\000\056\005\uffde\010\uffde\011\uffde" +
    "\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde" +
    "\032\uffde\033\uffde\034\uffde\036\uffde\045\uffde\055\uffde\001" +
    "\002\000\032\005\ufffe\010\ufffe\013\ufffe\014\ufffe\015\ufffe" +
    "\016\ufffe\017\ufffe\022\ufffe\023\ufffe\036\ufffe\045\ufffe\055" +
    "\ufffe\001\002\000\056\005\uffd7\010\uffd7\011\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\017\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\034\uffd7\036\uffd7\045\uffd7\055\uffd7\001\002\000" +
    "\056\005\uffd4\010\uffd4\011\uffd4\013\uffd4\014\uffd4\015\uffd4" +
    "\016\uffd4\017\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\036\uffd4\045\uffd4\055\uffd4\001\002\000\056\005\uffd1\010" +
    "\uffd1\011\227\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\025\226\026\uffd1\027\uffd1\030" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\036\uffd1\045\uffd1" +
    "\055\uffd1\001\002\000\052\005\uffcc\010\uffcc\013\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\017\uffcc\022\uffcc\023\uffcc\024\224" +
    "\026\223\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034" +
    "\uffcc\036\uffcc\045\uffcc\055\uffcc\001\002\000\046\005\uffc9" +
    "\010\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\022" +
    "\uffc9\023\uffc9\027\221\030\220\031\217\032\216\033\uffc9" +
    "\034\uffc9\036\uffc9\045\uffc9\055\uffc9\001\002\000\036\005" +
    "\uffc8\010\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8" +
    "\022\uffc8\023\uffc8\033\213\034\212\036\uffc8\045\uffc8\055" +
    "\uffc8\001\002\000\004\013\206\001\002\000\032\005\uffff" +
    "\010\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff\022" +
    "\uffff\023\uffff\036\uffff\045\uffff\055\uffff\001\002\000\054" +
    "\004\142\007\140\011\137\012\135\020\134\024\133\035" +
    "\173\040\172\043\161\044\160\047\157\050\155\051\153" +
    "\052\152\053\151\054\136\057\176\060\150\061\174\062" +
    "\141\063\143\001\002\000\056\005\uffdb\010\uffdb\011\uffdb" +
    "\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\022\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\036\uffdb\045\uffdb\055\uffdb\001" +
    "\002\000\032\005\uffc7\010\uffc7\013\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\017\uffc7\022\uffc7\023\uffc7\036\uffc7\045\uffc7\055" +
    "\uffc7\001\002\000\032\005\uffc6\010\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\016\uffc6\017\uffc6\022\uffc6\023\uffc6\036\uffc6\045" +
    "\uffc6\055\uffc6\001\002\000\004\036\205\001\002\000\012" +
    "\005\uffed\016\201\017\202\036\uffed\001\002\000\054\004" +
    "\142\007\140\011\137\012\135\020\134\024\133\035\173" +
    "\040\172\043\161\044\160\047\157\050\155\051\153\052" +
    "\152\053\151\054\136\057\176\060\150\061\174\062\141" +
    "\063\143\001\002\000\054\004\142\007\140\011\137\012" +
    "\135\020\134\024\133\035\173\040\172\043\161\044\160" +
    "\047\157\050\155\051\153\052\152\053\151\054\136\057" +
    "\176\060\150\061\174\062\141\063\143\001\002\000\006" +
    "\005\uffec\036\uffec\001\002\000\026\005\uffef\010\uffef\014" +
    "\uffef\015\uffef\016\uffef\017\uffef\022\uffef\023\uffef\036\uffef" +
    "\055\uffef\001\002\000\032\005\uffc5\010\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\022\uffc5\023\uffc5\036\uffc5" +
    "\045\uffc5\055\uffc5\001\002\000\004\004\207\001\002\000" +
    "\054\004\142\007\140\011\137\012\135\020\134\024\133" +
    "\035\173\040\172\043\161\044\160\047\157\050\155\051" +
    "\153\052\152\053\151\054\136\057\176\060\150\061\174" +
    "\062\141\063\143\001\002\000\004\005\211\001\002\000" +
    "\026\005\ufff9\010\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9" +
    "\022\ufff9\023\ufff9\036\ufff9\055\ufff9\001\002\000\020\004" +
    "\142\024\133\043\161\054\136\060\150\061\174\063\215" +
    "\001\002\000\020\004\142\024\133\043\161\054\136\060" +
    "\150\061\174\063\215\001\002\000\046\005\uffcb\010\uffcb" +
    "\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\022\uffcb\023" +
    "\uffcb\027\221\030\220\031\217\032\216\033\uffcb\034\uffcb" +
    "\036\uffcb\045\uffcb\055\uffcb\001\002\000\056\005\uffda\010" +
    "\uffda\011\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda" +
    "\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\036\uffda\045\uffda" +
    "\055\uffda\001\002\000\020\004\142\024\133\043\161\054" +
    "\136\060\150\061\174\063\215\001\002\000\020\004\142" +
    "\024\133\043\161\054\136\060\150\061\174\063\215\001" +
    "\002\000\020\004\142\024\133\043\161\054\136\060\150" +
    "\061\174\063\215\001\002\000\020\004\142\024\133\043" +
    "\161\054\136\060\150\061\174\063\215\001\002\000\052" +
    "\005\uffd0\010\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\022\uffd0\023\uffd0\024\224\026\223\027\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\034\uffd0\036\uffd0\045\uffd0\055" +
    "\uffd0\001\002\000\020\004\142\024\133\043\161\054\136" +
    "\060\150\061\174\063\215\001\002\000\020\004\142\024" +
    "\133\043\161\054\136\060\150\061\174\063\215\001\002" +
    "\000\056\005\uffd2\010\uffd2\011\227\013\uffd2\014\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\022\uffd2\023\uffd2\024\uffd2\025\226" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\036\uffd2\045\uffd2\055\uffd2\001\002\000\020\004\142" +
    "\024\133\043\161\054\136\060\150\061\174\063\215\001" +
    "\002\000\020\004\142\024\133\043\161\054\136\060\150" +
    "\061\174\063\215\001\002\000\056\005\uffd6\010\uffd6\011" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\022\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\036\uffd6\045\uffd6\055\uffd6" +
    "\001\002\000\056\005\uffd5\010\uffd5\011\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\022\uffd5\023\uffd5\024\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\036\uffd5\045\uffd5\055\uffd5\001\002\000\056" +
    "\005\uffd3\010\uffd3\011\227\013\uffd3\014\uffd3\015\uffd3\016" +
    "\uffd3\017\uffd3\022\uffd3\023\uffd3\024\uffd3\025\226\026\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\036" +
    "\uffd3\045\uffd3\055\uffd3\001\002\000\052\005\uffcf\010\uffcf" +
    "\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\022\uffcf\023" +
    "\uffcf\024\224\026\223\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\036\uffcf\045\uffcf\055\uffcf\001\002\000" +
    "\052\005\uffce\010\uffce\013\uffce\014\uffce\015\uffce\016\uffce" +
    "\017\uffce\022\uffce\023\uffce\024\224\026\223\027\uffce\030" +
    "\uffce\031\uffce\032\uffce\033\uffce\034\uffce\036\uffce\045\uffce" +
    "\055\uffce\001\002\000\052\005\uffcd\010\uffcd\013\uffcd\014" +
    "\uffcd\015\uffcd\016\uffcd\017\uffcd\022\uffcd\023\uffcd\024\224" +
    "\026\223\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034" +
    "\uffcd\036\uffcd\045\uffcd\055\uffcd\001\002\000\046\005\uffca" +
    "\010\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca\022" +
    "\uffca\023\uffca\027\221\030\220\031\217\032\216\033\uffca" +
    "\034\uffca\036\uffca\045\uffca\055\uffca\001\002\000\024\020" +
    "\021\027\016\037\013\043\011\054\022\056\020\060\023" +
    "\061\024\063\025\001\002\000\004\021\251\001\002\000" +
    "\004\005\245\001\002\000\010\005\uffe7\022\243\023\uffe7" +
    "\001\002\000\024\020\021\027\016\037\013\043\011\054" +
    "\022\056\020\060\023\061\024\063\025\001\002\000\006" +
    "\005\uffe6\023\uffe6\001\002\000\004\007\246\001\002\000" +
    "\054\004\142\007\140\011\137\012\135\020\134\024\133" +
    "\035\173\040\172\043\161\044\160\047\157\050\155\051" +
    "\153\052\152\053\151\054\136\057\176\060\150\061\174" +
    "\062\141\063\143\001\002\000\006\010\250\016\201\001" +
    "\002\000\026\005\ufff5\010\ufff5\014\ufff5\015\ufff5\016\ufff5" +
    "\017\ufff5\022\ufff5\023\ufff5\036\ufff5\055\ufff5\001\002\000" +
    "\006\020\134\063\253\001\002\000\016\005\uffe9\014\uffe9" +
    "\015\uffe9\022\uffe9\023\uffe9\045\254\001\002\000\032\005" +
    "\uffeb\010\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\022\uffeb\023\uffeb\036\uffeb\045\uffeb\055\uffeb\001\002\000" +
    "\054\004\142\007\140\011\137\012\135\020\134\024\133" +
    "\035\173\040\172\043\161\044\160\047\157\050\155\051" +
    "\153\052\152\053\151\054\136\057\176\060\150\061\174" +
    "\062\141\063\143\001\002\000\016\005\uffe8\014\uffe8\015" +
    "\uffe8\016\201\022\uffe8\023\uffe8\001\002\000\006\016\201" +
    "\055\257\001\002\000\044\004\044\011\043\012\042\020" +
    "\021\027\016\037\013\040\046\043\011\044\032\047\030" +
    "\050\027\054\022\056\020\060\023\061\024\062\034\063" +
    "\025\001\002\000\070\004\044\005\uffe4\010\uffe4\011\043" +
    "\012\042\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\021\022" +
    "\uffe4\023\uffe4\027\016\036\uffe4\037\013\040\046\043\011" +
    "\044\032\047\030\050\027\054\022\055\uffe4\056\020\060" +
    "\023\061\024\062\034\063\025\001\002\000\026\005\ufff3" +
    "\010\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\022\ufff3\023" +
    "\ufff3\036\ufff3\055\ufff3\001\002\000\006\016\050\023\263" +
    "\001\002\000\004\007\264\001\002\000\054\004\142\007" +
    "\140\011\137\012\135\020\134\024\133\035\173\040\172" +
    "\043\161\044\160\047\157\050\155\051\153\052\152\053" +
    "\151\054\136\057\176\060\150\061\174\062\141\063\143" +
    "\001\002\000\006\010\266\016\201\001\002\000\070\004" +
    "\uffe5\005\uffe5\010\uffe5\011\uffe5\012\uffe5\014\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\022\uffe5\023\uffe5\027\uffe5\036" +
    "\uffe5\037\uffe5\040\uffe5\043\uffe5\044\uffe5\047\uffe5\050\uffe5" +
    "\054\uffe5\055\uffe5\056\uffe5\060\uffe5\061\uffe5\062\uffe5\063" +
    "\uffe5\001\002\000\026\005\uffe3\010\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\017\uffe3\022\uffe3\023\uffe3\036\uffe3\055\uffe3\001" +
    "\002\000\004\046\274\001\002\000\006\017\272\046\uff97" +
    "\001\002\000\004\063\271\001\002\000\004\046\uff96\001" +
    "\002\000\054\004\142\007\140\011\137\012\135\020\134" +
    "\024\133\035\173\040\172\043\161\044\160\047\157\050" +
    "\155\051\153\052\152\053\151\054\136\057\176\060\150" +
    "\061\174\062\141\063\143\001\002\000\026\005\ufff2\010" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\022\ufff2\023\ufff2" +
    "\036\ufff2\055\ufff2\001\002\000\004\002\000\001\002\000" +
    "\004\041\301\001\002\000\004\010\311\001\002\000\024" +
    "\020\021\027\016\037\013\043\011\054\022\056\020\060" +
    "\023\061\024\063\025\001\002\000\006\010\uffe1\041\301" +
    "\001\002\000\004\010\uffe0\001\002\000\004\023\305\001" +
    "\002\000\004\007\306\001\002\000\054\004\142\007\140" +
    "\011\137\012\135\020\134\024\133\035\173\040\172\043" +
    "\161\044\160\047\157\050\155\051\153\052\152\053\151" +
    "\054\136\057\176\060\150\061\174\062\141\063\143\001" +
    "\002\000\006\010\310\016\201\001\002\000\006\010\uffe2" +
    "\041\uffe2\001\002\000\026\005\ufff4\010\ufff4\014\ufff4\015" +
    "\ufff4\016\ufff4\017\ufff4\022\ufff4\023\ufff4\036\ufff4\055\ufff4" +
    "\001\002\000\024\020\021\027\016\037\013\043\011\054" +
    "\022\056\020\060\023\061\024\063\025\001\002\000\004" +
    "\014\314\001\002\000\024\020\021\027\016\037\013\043" +
    "\011\054\022\056\020\060\023\061\024\063\025\001\002" +
    "\000\004\005\316\001\002\000\004\007\317\001\002\000" +
    "\054\004\142\007\140\011\137\012\135\020\134\024\133" +
    "\035\173\040\172\043\161\044\160\047\157\050\155\051" +
    "\153\052\152\053\151\054\136\057\176\060\150\061\174" +
    "\062\141\063\143\001\002\000\006\010\321\016\201\001" +
    "\002\000\026\005\ufff7\010\ufff7\014\ufff7\015\ufff7\016\ufff7" +
    "\017\ufff7\022\ufff7\023\ufff7\036\ufff7\055\ufff7\001\002\000" +
    "\024\020\021\027\016\037\013\043\011\054\022\056\020" +
    "\060\023\061\024\063\025\001\002\000\004\015\324\001" +
    "\002\000\024\020\021\027\016\037\013\043\011\054\022" +
    "\056\020\060\023\061\024\063\025\001\002\000\004\005" +
    "\326\001\002\000\004\007\327\001\002\000\054\004\142" +
    "\007\140\011\137\012\135\020\134\024\133\035\173\040" +
    "\172\043\161\044\160\047\157\050\155\051\153\052\152" +
    "\053\151\054\136\057\176\060\150\061\174\062\141\063" +
    "\143\001\002\000\006\010\331\016\201\001\002\000\026" +
    "\005\ufff6\010\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\022" +
    "\ufff6\023\ufff6\036\ufff6\055\ufff6\001\002\000\004\005\333" +
    "\001\002\000\056\005\uffd9\010\uffd9\011\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\016\uffd9\017\uffd9\022\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\036\uffd9\045\uffd9\055\uffd9\001\002\000\054" +
    "\004\142\007\140\011\137\012\135\020\134\024\133\035" +
    "\173\040\172\043\161\044\160\047\157\050\155\051\153" +
    "\052\152\053\151\054\136\057\176\060\150\061\174\062" +
    "\141\063\143\001\002\000\004\005\336\001\002\000\026" +
    "\005\ufff1\010\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\022" +
    "\ufff1\023\ufff1\036\ufff1\055\ufff1\001\002\000\006\010\340" +
    "\016\201\001\002\000\032\005\ufffd\010\ufffd\013\ufffd\014" +
    "\ufffd\015\ufffd\016\ufffd\017\ufffd\022\ufffd\023\ufffd\036\ufffd" +
    "\045\ufffd\055\ufffd\001\002\000\032\005\ufffc\010\ufffc\013" +
    "\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\022\ufffc\023\ufffc" +
    "\036\ufffc\045\ufffc\055\ufffc\001\002\000\032\005\ufffb\010" +
    "\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\022\ufffb" +
    "\023\ufffb\036\ufffb\045\ufffb\055\ufffb\001\002\000\032\005" +
    "\uffea\010\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea" +
    "\022\uffea\023\uffea\036\uffea\045\uffea\055\uffea\001\002\000" +
    "\056\005\uffd8\010\uffd8\011\uffd8\013\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\017\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\036\uffd8\045\uffd8\055\uffd8\001\002\000\004\031\346\001" +
    "\002\000\026\005\uff9f\010\uff9f\013\uff9f\016\uff9f\017\uff9f" +
    "\021\uff9f\022\uff9f\023\uff9f\031\uff9f\055\uff9f\001\002\000" +
    "\026\005\uffa9\020\021\027\016\037\013\043\011\054\022" +
    "\056\020\060\023\061\024\063\025\001\002\000\004\005" +
    "\uffa7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\031\011\041\013\042\016\047\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\031\032\033\035\034\036\035" +
    "\037\036\040\037\046\040\344\041\034\047\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\031\124\033" +
    "\035\034\126\047\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\031" +
    "\032\033\035\034\036\035\037\036\040\037\046\040\030" +
    "\041\034\047\044\001\001\000\006\031\117\032\115\001" +
    "\001\000\022\031\032\033\035\034\036\035\037\036\040" +
    "\037\103\041\034\047\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\031\011\041\056\047\014" +
    "\001\001\000\010\031\011\041\055\047\014\001\001\000" +
    "\022\031\032\033\035\034\036\035\037\036\040\037\053" +
    "\041\034\047\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\031\032\033\035\034\036" +
    "\035\037\036\052\041\034\047\044\001\001\000\024\031" +
    "\032\033\035\034\036\035\037\036\040\037\046\040\051" +
    "\041\034\047\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\031\032\033" +
    "\035\034\036\035\037\036\040\037\046\040\061\041\034" +
    "\047\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\031\032\033\035\034\036\035\037\036\040\037\046" +
    "\040\064\041\034\047\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\031\011\041\067\043\070\044\071" +
    "\047\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\031\032\033\035" +
    "\034\036\035\037\036\040\037\074\041\034\047\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\031\011" +
    "\041\067\043\070\044\077\047\014\001\001\000\002\001" +
    "\001\000\010\031\011\041\101\047\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\031" +
    "\032\033\035\034\036\035\037\036\040\037\106\041\034" +
    "\045\105\046\107\047\044\001\001\000\026\031\032\033" +
    "\035\034\036\035\037\036\040\037\106\041\034\045\105" +
    "\046\114\047\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\031\032\033\035\034\036" +
    "\035\037\036\040\037\112\041\034\047\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\117\032\121\001\001\000\002\001\001\000\020\031\032" +
    "\033\035\034\036\035\037\036\123\041\034\047\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\143\004\144\005\145\006\146\007\153\011\170" +
    "\020\155\021\162\022\163\023\164\024\165\025\166\026" +
    "\167\027\174\030\161\001\001\000\006\020\155\021\343" +
    "\001\001\000\030\003\143\004\342\020\155\021\162\022" +
    "\163\023\164\024\165\025\166\026\167\027\174\030\161" +
    "\001\001\000\004\011\341\001\001\000\002\001\001\000" +
    "\004\011\340\001\001\000\040\003\143\004\144\005\145" +
    "\006\146\007\336\011\170\020\155\021\162\022\163\023" +
    "\164\024\165\025\166\026\167\027\174\030\161\001\001" +
    "\000\002\001\001\000\022\020\155\021\162\022\163\023" +
    "\164\024\165\025\166\026\167\027\331\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\267\001\001\000\002\001\001\000\040\003\143" +
    "\004\144\005\145\006\146\007\255\011\170\020\155\021" +
    "\162\022\163\023\164\024\165\025\166\026\167\027\174" +
    "\030\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\003\143" +
    "\004\144\005\145\006\146\007\177\010\176\011\170\020" +
    "\155\021\162\022\163\023\164\024\165\025\166\026\167" +
    "\027\174\030\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\143\004\144\005\145\006\203\011\170\020" +
    "\155\021\162\022\163\023\164\024\165\025\166\026\167" +
    "\027\174\030\161\001\001\000\042\003\143\004\144\005" +
    "\145\006\146\007\177\010\202\011\170\020\155\021\162" +
    "\022\163\023\164\024\165\025\166\026\167\027\174\030" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\003\143\004\144\005" +
    "\145\006\146\007\177\010\207\011\170\020\155\021\162" +
    "\022\163\023\164\024\165\025\166\026\167\027\174\030" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\020\155\021\162\022\163\023\164\024\165\025\235\001" +
    "\001\000\016\020\155\021\162\022\163\023\164\024\165" +
    "\025\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\020\155\021\162\022\163\023\164\024\234\001\001" +
    "\000\014\020\155\021\162\022\163\023\164\024\233\001" +
    "\001\000\014\020\155\021\162\022\163\023\164\024\232" +
    "\001\001\000\014\020\155\021\162\022\163\023\164\024" +
    "\221\001\001\000\002\001\001\000\012\020\155\021\162" +
    "\022\163\023\231\001\001\000\012\020\155\021\162\022" +
    "\163\023\224\001\001\000\002\001\001\000\010\020\155" +
    "\021\162\022\230\001\001\000\010\020\155\021\162\022" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\012\241\013\240\031\011" +
    "\041\237\047\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\012\241\013\243\031\011" +
    "\041\237\047\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\143\004\144\005\145\006\146\007\246" +
    "\011\170\020\155\021\162\022\163\023\164\024\165\025" +
    "\166\026\167\027\174\030\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\251\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\143\004\144\005\145" +
    "\006\146\007\254\011\170\020\155\021\162\022\163\023" +
    "\164\024\165\025\166\026\167\027\174\030\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\014\257\015" +
    "\260\031\032\033\035\034\036\035\037\036\040\037\261" +
    "\041\034\047\044\001\001\000\026\014\257\015\266\031" +
    "\032\033\035\034\036\035\037\036\040\037\261\041\034" +
    "\047\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\143\004\144\005\145\006\146" +
    "\007\264\011\170\020\155\021\162\022\163\023\164\024" +
    "\165\025\166\026\167\027\174\030\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\272\001\001\000\002" +
    "\001\001\000\036\003\143\004\144\005\145\006\274\011" +
    "\170\020\155\021\162\022\163\023\164\024\165\025\166" +
    "\026\167\027\174\030\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\301\017\277\001\001\000\002" +
    "\001\001\000\014\012\241\013\303\031\011\041\237\047" +
    "\014\001\001\000\006\016\301\017\302\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\143\004\144\005\145\006\146\007\306\011\170\020\155" +
    "\021\162\022\163\023\164\024\165\025\166\026\167\027" +
    "\174\030\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\312\031\011\041\237\047" +
    "\014\001\001\000\002\001\001\000\012\012\314\031\011" +
    "\041\237\047\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\143\004\144\005\145\006\146\007\317" +
    "\011\170\020\155\021\162\022\163\023\164\024\165\025" +
    "\166\026\167\027\174\030\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\322\031\011\041\237\047" +
    "\014\001\001\000\002\001\001\000\012\012\324\031\011" +
    "\041\237\047\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\143\004\144\005\145\006\146\007\327" +
    "\011\170\020\155\021\162\022\163\023\164\024\165\025" +
    "\166\026\167\027\174\030\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\003\143\004\144\005\145\006\146\007\177\010\334" +
    "\011\170\020\155\021\162\022\163\023\164\024\165\025" +
    "\166\026\167\027\174\030\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\031" +
    "\011\041\013\042\347\047\014\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public coop.rchain.syntax.rholang.Absyn.Contr pContr() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (coop.rchain.syntax.rholang.Absyn.Contr) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ListName ::= Name _SYMB_11 ListName 
            {
              coop.rchain.syntax.rholang.Absyn.ListName RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListName p_3 = (coop.rchain.syntax.rholang.Absyn.ListName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListName",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ListName ::= Name 
            {
              coop.rchain.syntax.rholang.Absyn.ListName RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListName(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListName",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ListVar ::= Var _SYMB_11 ListVar 
            {
              coop.rchain.syntax.rholang.Absyn.ListVar RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListVar p_3 = (coop.rchain.syntax.rholang.Absyn.ListVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVar",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ListVar ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.ListVar RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListVar(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVar",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ListValPattern ::= ValPattern _SYMB_11 ListValPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListValPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ValPattern p_1 = (coop.rchain.syntax.rholang.Absyn.ValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListValPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListValPattern",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ListValPattern ::= ValPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListValPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ValPattern p_1 = (coop.rchain.syntax.rholang.Absyn.ValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListValPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListValPattern",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ValPattern ::= _STRING_ 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtStr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ValPattern ::= _DOUBLE_ 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtDbl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ValPattern ::= _INTEGER_ 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ValPattern ::= _SYMB_31 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ValPattern ::= _SYMB_40 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ValPattern ::= _SYMB_19 ListPPattern _SYMB_21 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_2 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtTuple(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ValPattern ::= Var _SYMB_3 ListPPattern _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtStruct(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ListPatternPatternMatch ::= PatternPatternMatch ListPatternPatternMatch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternPatternMatch p_1 = (coop.rchain.syntax.rholang.Absyn.PatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch p_2 = (coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternPatternMatch",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ListPatternPatternMatch ::= PatternPatternMatch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternPatternMatch p_1 = (coop.rchain.syntax.rholang.Absyn.PatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternPatternMatch",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PatternPatternMatch ::= PPattern _SYMB_15 _SYMB_3 PPattern _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.PatternPatternMatch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_4 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PtBranch(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PatternPatternMatch",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ListPatternBind ::= PatternBind _SYMB_14 ListPatternBind 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternBind p_1 = (coop.rchain.syntax.rholang.Absyn.PatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPatternBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListPatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternBind",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ListPatternBind ::= PatternBind 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternBind p_1 = (coop.rchain.syntax.rholang.Absyn.PatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPatternBind(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternBind",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PatternBind ::= CPattern _SYMB_13 CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PatternBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.CPattern p_3 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PtBind(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PatternBind",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ListCPattern ::= CPattern _SYMB_11 ListCPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListCPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListCPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListCPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCPattern",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ListCPattern ::= CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListCPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListCPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCPattern",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ListCPattern ::= 
            {
              coop.rchain.syntax.rholang.Absyn.ListCPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListCPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCPattern",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CPattern ::= _SYMB_12 PPattern3 
            {
              coop.rchain.syntax.rholang.Absyn.CPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_2 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CPtQuote(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPattern",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CPattern ::= ValPattern 
            {
              coop.rchain.syntax.rholang.Absyn.CPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ValPattern p_1 = (coop.rchain.syntax.rholang.Absyn.ValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CValPtrn(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPattern",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CPattern ::= VarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.CPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CPtVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPattern",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ListPPattern ::= PPattern _SYMB_11 ListPPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListPPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPPattern",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ListPPattern ::= PPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListPPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPPattern",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ListPPattern ::= 
            {
              coop.rchain.syntax.rholang.Absyn.ListPPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPPattern",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PPattern ::= PPattern1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PPattern ::= PPattern _SYMB_10 PPattern1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_3 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtPar(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PPattern1 ::= PPattern2 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PPattern1 ::= Name _SYMB_0 ListPPattern _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PPattern1 ::= _SYMB_36 ListVarPattern _SYMB_34 PPattern1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListVarPattern p_2 = (coop.rchain.syntax.rholang.Absyn.ListVarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_4 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtNew(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PPattern1 ::= _SYMB_35 PPattern _SYMB_41 ListPatternPatternMatch 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_2 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch p_4 = (coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtMatch(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PPattern1 ::= _SYMB_32 _SYMB_0 ListPatternBind _SYMB_1 _SYMB_3 PPattern _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListPatternBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListPatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_6 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtInput(p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PPattern2 ::= PPattern3 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern2",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PPattern2 ::= CPattern _SYMB_7 _SYMB_0 ListPPattern _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_4 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtOutput(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern2",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PPattern3 ::= PPattern4 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern3",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PPattern3 ::= _SYMB_6 CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_2 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtInject(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern3",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PPattern3 ::= _SYMB_5 CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_2 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtDrop(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern3",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PPattern4 ::= _SYMB_0 PPattern _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_2 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PPattern4 ::= ValPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ValPattern p_1 = (coop.rchain.syntax.rholang.Absyn.ValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtVal(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PPattern4 ::= _SYMB_28 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtNil(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PPattern4 ::= VarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ListVarPattern ::= VarPattern _SYMB_11 ListVarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListVarPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListVarPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListVarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVarPattern",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ListVarPattern ::= VarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListVarPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListVarPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVarPattern",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ListVarPattern ::= 
            {
              coop.rchain.syntax.rholang.Absyn.ListVarPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListVarPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVarPattern",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VarPattern ::= _SYMB_27 
            {
              coop.rchain.syntax.rholang.Absyn.VarPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VarPtWild(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarPattern",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VarPattern ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.VarPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VarPtVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarPattern",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Value ::= _SYMB_25 ListProc _SYMB_26 
            {
              coop.rchain.syntax.rholang.Absyn.Value RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListProc p_2 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ETuple(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Value ::= _CHAR_ 
            {
              coop.rchain.syntax.rholang.Absyn.Value RESULT =null;
		Character p_1 = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.EChar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Value ::= Quantity 
            {
              coop.rchain.syntax.rholang.Absyn.Value RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VQuant(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Quantity ::= Quantity1 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Quantity1 ::= Quantity2 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity1",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Quantity1 ::= Quantity1 _SYMB_24 Quantity2 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QNeq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity1",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Quantity1 ::= Quantity1 _SYMB_23 Quantity2 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QEq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity1",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Quantity2 ::= Quantity3 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity2",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Quantity2 ::= Quantity2 _SYMB_22 Quantity3 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QGte(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity2",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Quantity2 ::= Quantity2 _SYMB_21 Quantity3 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QGt(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity2",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Quantity2 ::= Quantity2 _SYMB_20 Quantity3 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QLte(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity2",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Quantity2 ::= Quantity2 _SYMB_19 Quantity3 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QLt(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity2",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Quantity3 ::= Quantity4 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity3",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Quantity3 ::= Quantity3 _SYMB_16 Quantity4 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QMinus(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity3",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Quantity3 ::= Quantity3 _SYMB_18 Quantity4 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QAdd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity3",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Quantity4 ::= Quantity5 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity4",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Quantity4 ::= Quantity4 _SYMB_17 Quantity5 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QDiv(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity4",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Quantity4 ::= Quantity4 _SYMB_5 Quantity5 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QMult(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity4",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Quantity5 ::= Quantity6 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity5",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Quantity5 ::= _SYMB_16 Quantity6 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_2 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QNeg(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity5",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Quantity6 ::= _SYMB_0 Quantity _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_2 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity6",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Quantity6 ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity6",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Quantity6 ::= _DOUBLE_ 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QDouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity6",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Quantity6 ::= _INTEGER_ 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity6",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Quantity6 ::= RhoBool 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.RhoBool p_1 = (coop.rchain.syntax.rholang.Absyn.RhoBool)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QBool(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity6",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RhoBool ::= _SYMB_31 
            {
              coop.rchain.syntax.rholang.Absyn.RhoBool RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RhoBool",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RhoBool ::= _SYMB_40 
            {
              coop.rchain.syntax.rholang.Absyn.RhoBool RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RhoBool",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ListCBranch ::= CBranch ListCBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListCBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CBranch p_1 = (coop.rchain.syntax.rholang.Absyn.CBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		coop.rchain.syntax.rholang.Absyn.ListCBranch p_2 = (coop.rchain.syntax.rholang.Absyn.ListCBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCBranch",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ListCBranch ::= CBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListCBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CBranch p_1 = (coop.rchain.syntax.rholang.Absyn.CBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListCBranch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCBranch",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CBranch ::= _SYMB_29 ListBind _SYMB_15 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.CBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListBind p_2 = (coop.rchain.syntax.rholang.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_5 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.Choice(p_2,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CBranch",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ListPMBranch ::= PMBranch ListPMBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPMBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PMBranch p_1 = (coop.rchain.syntax.rholang.Absyn.PMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		coop.rchain.syntax.rholang.Absyn.ListPMBranch p_2 = (coop.rchain.syntax.rholang.Absyn.ListPMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPMBranch",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ListPMBranch ::= PMBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPMBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PMBranch p_1 = (coop.rchain.syntax.rholang.Absyn.PMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPMBranch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPMBranch",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PMBranch ::= PPattern _SYMB_15 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.PMBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_4 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PatternMatch(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PMBranch",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListBind ::= Bind _SYMB_14 ListBind 
            {
              coop.rchain.syntax.rholang.Absyn.ListBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_1 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListBind",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ListBind ::= Bind 
            {
              coop.rchain.syntax.rholang.Absyn.ListBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_1 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListBind(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListBind",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Bind ::= CPattern _SYMB_13 Chan _SYMB_33 Proc 
            {
              coop.rchain.syntax.rholang.Absyn.Bind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Chan p_3 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_5 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CondInputBind(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bind",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Bind ::= CPattern _SYMB_13 Chan 
            {
              coop.rchain.syntax.rholang.Absyn.Bind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Chan p_3 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.InputBind(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bind",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Chan ::= _SYMB_12 Proc3 
            {
              coop.rchain.syntax.rholang.Absyn.Chan RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_2 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CQuote(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Chan",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Chan ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.Chan RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Chan",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ListProc ::= Proc _SYMB_11 ListProc 
            {
              coop.rchain.syntax.rholang.Absyn.ListProc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_3 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListProc",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ListProc ::= Proc 
            {
              coop.rchain.syntax.rholang.Absyn.ListProc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListProc(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListProc",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Proc ::= Proc1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Proc ::= Proc _SYMB_10 Proc1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_3 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPar(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Proc1 ::= Proc2 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Proc1 ::= Name _SYMB_0 ListProc _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_3 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Proc1 ::= _SYMB_36 ListVar _SYMB_34 Proc1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListVar p_2 = (coop.rchain.syntax.rholang.Absyn.ListVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_4 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PNew(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Proc1 ::= _SYMB_35 Proc _SYMB_41 ListPMBranch 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_2 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPMBranch p_4 = (coop.rchain.syntax.rholang.Absyn.ListPMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PMatch(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Proc1 ::= _SYMB_37 _SYMB_3 ListCBranch _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListCBranch p_3 = (coop.rchain.syntax.rholang.Absyn.ListCBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PChoice(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Proc1 ::= _SYMB_32 _SYMB_0 ListBind _SYMB_1 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_6 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PInput(p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Proc1 ::= _SYMB_39 _SYMB_0 Bind _SYMB_9 Bind _SYMB_1 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_3 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		coop.rchain.syntax.rholang.Absyn.Bind p_5 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_8 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PFoldR(p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Proc1 ::= _SYMB_38 _SYMB_0 Bind _SYMB_8 Bind _SYMB_1 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_3 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		coop.rchain.syntax.rholang.Absyn.Bind p_5 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_8 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PFoldL(p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Proc2 ::= Proc3 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc2",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Proc2 ::= Chan _SYMB_7 _SYMB_0 ListProc _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Chan p_1 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_4 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PLift(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc2",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Proc3 ::= Proc4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Proc3 ::= _SYMB_6 Chan 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Chan p_2 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PInject(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Proc3 ::= _SYMB_5 Chan 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Chan p_2 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PDrop(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Proc4 ::= _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_2 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Proc4 ::= Value 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Value p_1 = (coop.rchain.syntax.rholang.Absyn.Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PValue(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Proc4 ::= _SYMB_28 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PNil(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Contr ::= _SYMB_30 Name _SYMB_0 ListCPattern _SYMB_1 _SYMB_2 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Contr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		coop.rchain.syntax.rholang.Absyn.ListCPattern p_4 = (coop.rchain.syntax.rholang.Absyn.ListCPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_8 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.DContr(p_2,p_4,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Contr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Contr EOF 
            {
              Object RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Contr start_val = (coop.rchain.syntax.rholang.Absyn.Contr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

